<?php
/**
 * PositionData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Upstox Developer API
 *
 * Build your App on the Upstox platform  ![Banner](https://api-v2.upstox.com/api-docs/images/banner.jpg \"banner\")  # Introduction  Upstox API is a set of rest APIs that provide data required to build a complete investment and trading platform. Execute orders in real time, manage user portfolio, stream live market data (using Websocket), and more, with the easy to understand API collection.  All requests are over HTTPS and the requests are sent with the content-type ‘application/json’. Developers have the option of choosing the response type as JSON or CSV for a few API calls.  To be able to use these APIs you need to create an App in the Developer Console and generate your **apiKey** and **apiSecret**. You can use a redirect URL which will be called after the login flow.  If you are a **trader**, you can directly create apps from Upstox mobile app or the desktop platform itself from **Apps** sections inside the **Account** Tab. Head over to <a href=\"http://account.upstox.com/developer/apps\" target=\"_blank\">account.upstox.com/developer/apps</a>.</br> If you are a **business** looking to integrate Upstox APIs, reach out to us and we will get a custom app created for you in no time.  It is highly recommended that you do not embed the **apiSecret** in your frontend app. Create a remote backend which does the handshake on behalf of the frontend app. Marking the apiSecret in the frontend app will make your app vulnerable to threats and potential issues.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Upstox\Client\Model;

use \ArrayAccess;
use \Upstox\Client\ObjectSerializer;

/**
 * PositionData Class Doc Comment
 *
 * @category Class
 * @description Response data for position details
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PositionData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PositionData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'exchange' => 'string',
        'multiplier' => 'float',
        'value' => 'float',
        'pnl' => 'float',
        'product' => 'string',
        'instrument_token' => 'string',
        'average_price' => 'float',
        'buy_value' => 'float',
        'overnight_quantity' => 'int',
        'day_buy_value' => 'float',
        'day_buy_price' => 'float',
        'overnight_buy_amount' => 'float',
        'overnight_buy_quantity' => 'int',
        'day_buy_quantity' => 'int',
        'day_sell_value' => 'float',
        'day_sell_price' => 'float',
        'overnight_sell_amount' => 'float',
        'overnight_sell_quantity' => 'int',
        'day_sell_quantity' => 'int',
        'quantity' => 'int',
        'last_price' => 'float',
        'unrealised' => 'float',
        'realised' => 'float',
        'sell_value' => 'float',
        'tradingsymbol' => 'string',
        'trading_symbol' => 'string',
        'close_price' => 'float',
        'buy_price' => 'float',
        'sell_price' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'exchange' => null,
        'multiplier' => 'float',
        'value' => 'float',
        'pnl' => 'float',
        'product' => null,
        'instrument_token' => null,
        'average_price' => 'float',
        'buy_value' => 'float',
        'overnight_quantity' => 'int32',
        'day_buy_value' => 'float',
        'day_buy_price' => 'float',
        'overnight_buy_amount' => 'float',
        'overnight_buy_quantity' => 'int32',
        'day_buy_quantity' => 'int32',
        'day_sell_value' => 'float',
        'day_sell_price' => 'float',
        'overnight_sell_amount' => 'float',
        'overnight_sell_quantity' => 'int32',
        'day_sell_quantity' => 'int32',
        'quantity' => 'int32',
        'last_price' => 'float',
        'unrealised' => 'float',
        'realised' => 'float',
        'sell_value' => 'float',
        'tradingsymbol' => null,
        'trading_symbol' => null,
        'close_price' => 'float',
        'buy_price' => 'float',
        'sell_price' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'exchange' => 'exchange',
        'multiplier' => 'multiplier',
        'value' => 'value',
        'pnl' => 'pnl',
        'product' => 'product',
        'instrument_token' => 'instrument_token',
        'average_price' => 'average_price',
        'buy_value' => 'buy_value',
        'overnight_quantity' => 'overnight_quantity',
        'day_buy_value' => 'day_buy_value',
        'day_buy_price' => 'day_buy_price',
        'overnight_buy_amount' => 'overnight_buy_amount',
        'overnight_buy_quantity' => 'overnight_buy_quantity',
        'day_buy_quantity' => 'day_buy_quantity',
        'day_sell_value' => 'day_sell_value',
        'day_sell_price' => 'day_sell_price',
        'overnight_sell_amount' => 'overnight_sell_amount',
        'overnight_sell_quantity' => 'overnight_sell_quantity',
        'day_sell_quantity' => 'day_sell_quantity',
        'quantity' => 'quantity',
        'last_price' => 'last_price',
        'unrealised' => 'unrealised',
        'realised' => 'realised',
        'sell_value' => 'sell_value',
        'tradingsymbol' => 'tradingsymbol',
        'trading_symbol' => 'trading_symbol',
        'close_price' => 'close_price',
        'buy_price' => 'buy_price',
        'sell_price' => 'sell_price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'exchange' => 'setExchange',
        'multiplier' => 'setMultiplier',
        'value' => 'setValue',
        'pnl' => 'setPnl',
        'product' => 'setProduct',
        'instrument_token' => 'setInstrumentToken',
        'average_price' => 'setAveragePrice',
        'buy_value' => 'setBuyValue',
        'overnight_quantity' => 'setOvernightQuantity',
        'day_buy_value' => 'setDayBuyValue',
        'day_buy_price' => 'setDayBuyPrice',
        'overnight_buy_amount' => 'setOvernightBuyAmount',
        'overnight_buy_quantity' => 'setOvernightBuyQuantity',
        'day_buy_quantity' => 'setDayBuyQuantity',
        'day_sell_value' => 'setDaySellValue',
        'day_sell_price' => 'setDaySellPrice',
        'overnight_sell_amount' => 'setOvernightSellAmount',
        'overnight_sell_quantity' => 'setOvernightSellQuantity',
        'day_sell_quantity' => 'setDaySellQuantity',
        'quantity' => 'setQuantity',
        'last_price' => 'setLastPrice',
        'unrealised' => 'setUnrealised',
        'realised' => 'setRealised',
        'sell_value' => 'setSellValue',
        'tradingsymbol' => 'setTradingsymbolDuplicate',
        'trading_symbol' => 'setTradingSymbol',
        'close_price' => 'setClosePrice',
        'buy_price' => 'setBuyPrice',
        'sell_price' => 'setSellPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'exchange' => 'getExchange',
        'multiplier' => 'getMultiplier',
        'value' => 'getValue',
        'pnl' => 'getPnl',
        'product' => 'getProduct',
        'instrument_token' => 'getInstrumentToken',
        'average_price' => 'getAveragePrice',
        'buy_value' => 'getBuyValue',
        'overnight_quantity' => 'getOvernightQuantity',
        'day_buy_value' => 'getDayBuyValue',
        'day_buy_price' => 'getDayBuyPrice',
        'overnight_buy_amount' => 'getOvernightBuyAmount',
        'overnight_buy_quantity' => 'getOvernightBuyQuantity',
        'day_buy_quantity' => 'getDayBuyQuantity',
        'day_sell_value' => 'getDaySellValue',
        'day_sell_price' => 'getDaySellPrice',
        'overnight_sell_amount' => 'getOvernightSellAmount',
        'overnight_sell_quantity' => 'getOvernightSellQuantity',
        'day_sell_quantity' => 'getDaySellQuantity',
        'quantity' => 'getQuantity',
        'last_price' => 'getLastPrice',
        'unrealised' => 'getUnrealised',
        'realised' => 'getRealised',
        'sell_value' => 'getSellValue',
        'tradingsymbol' => 'getTradingsymbolDuplicate',
        'trading_symbol' => 'getTradingSymbol',
        'close_price' => 'getClosePrice',
        'buy_price' => 'getBuyPrice',
        'sell_price' => 'getSellPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EXCHANGE_NSE = 'NSE';
    const EXCHANGE_NFO = 'NFO';
    const EXCHANGE_CDS = 'CDS';
    const EXCHANGE_BSE = 'BSE';
    const EXCHANGE_BCD = 'BCD';
    const EXCHANGE_BFO = 'BFO';
    const EXCHANGE_MCX = 'MCX';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExchangeAllowableValues()
    {
        return [
            self::EXCHANGE_NSE,
            self::EXCHANGE_NFO,
            self::EXCHANGE_CDS,
            self::EXCHANGE_BSE,
            self::EXCHANGE_BCD,
            self::EXCHANGE_BFO,
            self::EXCHANGE_MCX,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['exchange'] = isset($data['exchange']) ? $data['exchange'] : null;
        $this->container['multiplier'] = isset($data['multiplier']) ? $data['multiplier'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['pnl'] = isset($data['pnl']) ? $data['pnl'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['instrument_token'] = isset($data['instrument_token']) ? $data['instrument_token'] : null;
        $this->container['average_price'] = isset($data['average_price']) ? $data['average_price'] : null;
        $this->container['buy_value'] = isset($data['buy_value']) ? $data['buy_value'] : null;
        $this->container['overnight_quantity'] = isset($data['overnight_quantity']) ? $data['overnight_quantity'] : null;
        $this->container['day_buy_value'] = isset($data['day_buy_value']) ? $data['day_buy_value'] : null;
        $this->container['day_buy_price'] = isset($data['day_buy_price']) ? $data['day_buy_price'] : null;
        $this->container['overnight_buy_amount'] = isset($data['overnight_buy_amount']) ? $data['overnight_buy_amount'] : null;
        $this->container['overnight_buy_quantity'] = isset($data['overnight_buy_quantity']) ? $data['overnight_buy_quantity'] : null;
        $this->container['day_buy_quantity'] = isset($data['day_buy_quantity']) ? $data['day_buy_quantity'] : null;
        $this->container['day_sell_value'] = isset($data['day_sell_value']) ? $data['day_sell_value'] : null;
        $this->container['day_sell_price'] = isset($data['day_sell_price']) ? $data['day_sell_price'] : null;
        $this->container['overnight_sell_amount'] = isset($data['overnight_sell_amount']) ? $data['overnight_sell_amount'] : null;
        $this->container['overnight_sell_quantity'] = isset($data['overnight_sell_quantity']) ? $data['overnight_sell_quantity'] : null;
        $this->container['day_sell_quantity'] = isset($data['day_sell_quantity']) ? $data['day_sell_quantity'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['last_price'] = isset($data['last_price']) ? $data['last_price'] : null;
        $this->container['unrealised'] = isset($data['unrealised']) ? $data['unrealised'] : null;
        $this->container['realised'] = isset($data['realised']) ? $data['realised'] : null;
        $this->container['sell_value'] = isset($data['sell_value']) ? $data['sell_value'] : null;
        $this->container['tradingsymbol'] = isset($data['tradingsymbol']) ? $data['tradingsymbol'] : null;
        $this->container['trading_symbol'] = isset($data['trading_symbol']) ? $data['trading_symbol'] : null;
        $this->container['close_price'] = isset($data['close_price']) ? $data['close_price'] : null;
        $this->container['buy_price'] = isset($data['buy_price']) ? $data['buy_price'] : null;
        $this->container['sell_price'] = isset($data['sell_price']) ? $data['sell_price'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getExchangeAllowableValues();
        if (!is_null($this->container['exchange']) && !in_array($this->container['exchange'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'exchange', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets exchange
     *
     * @return string
     */
    public function getExchange()
    {
        return $this->container['exchange'];
    }

    /**
     * Sets exchange
     *
     * @param string $exchange Exchange to which the order is associated
     *
     * @return $this
     */
    public function setExchange($exchange)
    {
        $allowedValues = $this->getExchangeAllowableValues();
        if (!is_null($exchange) && !in_array($exchange, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'exchange', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exchange'] = $exchange;

        return $this;
    }

    /**
     * Gets multiplier
     *
     * @return float
     */
    public function getMultiplier()
    {
        return $this->container['multiplier'];
    }

    /**
     * Sets multiplier
     *
     * @param float $multiplier The quantity/lot size multiplier used for calculating P&Ls
     *
     * @return $this
     */
    public function setMultiplier($multiplier)
    {
        $this->container['multiplier'] = $multiplier;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float $value Net value of the position
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets pnl
     *
     * @return float
     */
    public function getPnl()
    {
        return $this->container['pnl'];
    }

    /**
     * Sets pnl
     *
     * @param float $pnl Profit and loss - net returns on the position
     *
     * @return $this
     */
    public function setPnl($pnl)
    {
        $this->container['pnl'] = $pnl;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product Shows if the order was either Intraday, Delivery, CO or OCO
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets instrument_token
     *
     * @return string
     */
    public function getInstrumentToken()
    {
        return $this->container['instrument_token'];
    }

    /**
     * Sets instrument_token
     *
     * @param string $instrument_token Key issued by Upstox for the instrument
     *
     * @return $this
     */
    public function setInstrumentToken($instrument_token)
    {
        $this->container['instrument_token'] = $instrument_token;

        return $this;
    }

    /**
     * Gets average_price
     *
     * @return float
     */
    public function getAveragePrice()
    {
        return $this->container['average_price'];
    }

    /**
     * Sets average_price
     *
     * @param float $average_price Average price at which the net position quantity was acquired
     *
     * @return $this
     */
    public function setAveragePrice($average_price)
    {
        $this->container['average_price'] = $average_price;

        return $this;
    }

    /**
     * Gets buy_value
     *
     * @return float
     */
    public function getBuyValue()
    {
        return $this->container['buy_value'];
    }

    /**
     * Sets buy_value
     *
     * @param float $buy_value Net value of the bought quantities
     *
     * @return $this
     */
    public function setBuyValue($buy_value)
    {
        $this->container['buy_value'] = $buy_value;

        return $this;
    }

    /**
     * Gets overnight_quantity
     *
     * @return int
     */
    public function getOvernightQuantity()
    {
        return $this->container['overnight_quantity'];
    }

    /**
     * Sets overnight_quantity
     *
     * @param int $overnight_quantity Quantity held previously and carried forward over night
     *
     * @return $this
     */
    public function setOvernightQuantity($overnight_quantity)
    {
        $this->container['overnight_quantity'] = $overnight_quantity;

        return $this;
    }

    /**
     * Gets day_buy_value
     *
     * @return float
     */
    public function getDayBuyValue()
    {
        return $this->container['day_buy_value'];
    }

    /**
     * Sets day_buy_value
     *
     * @param float $day_buy_value Amount at which the quantity is bought during the day
     *
     * @return $this
     */
    public function setDayBuyValue($day_buy_value)
    {
        $this->container['day_buy_value'] = $day_buy_value;

        return $this;
    }

    /**
     * Gets day_buy_price
     *
     * @return float
     */
    public function getDayBuyPrice()
    {
        return $this->container['day_buy_price'];
    }

    /**
     * Sets day_buy_price
     *
     * @param float $day_buy_price Average price at which the day qty was bought. Default is empty string
     *
     * @return $this
     */
    public function setDayBuyPrice($day_buy_price)
    {
        $this->container['day_buy_price'] = $day_buy_price;

        return $this;
    }

    /**
     * Gets overnight_buy_amount
     *
     * @return float
     */
    public function getOvernightBuyAmount()
    {
        return $this->container['overnight_buy_amount'];
    }

    /**
     * Sets overnight_buy_amount
     *
     * @param float $overnight_buy_amount Amount at which the quantity was bought in the previous session
     *
     * @return $this
     */
    public function setOvernightBuyAmount($overnight_buy_amount)
    {
        $this->container['overnight_buy_amount'] = $overnight_buy_amount;

        return $this;
    }

    /**
     * Gets overnight_buy_quantity
     *
     * @return int
     */
    public function getOvernightBuyQuantity()
    {
        return $this->container['overnight_buy_quantity'];
    }

    /**
     * Sets overnight_buy_quantity
     *
     * @param int $overnight_buy_quantity Quantity bought in the previous session
     *
     * @return $this
     */
    public function setOvernightBuyQuantity($overnight_buy_quantity)
    {
        $this->container['overnight_buy_quantity'] = $overnight_buy_quantity;

        return $this;
    }

    /**
     * Gets day_buy_quantity
     *
     * @return int
     */
    public function getDayBuyQuantity()
    {
        return $this->container['day_buy_quantity'];
    }

    /**
     * Sets day_buy_quantity
     *
     * @param int $day_buy_quantity Quantity bought during the day
     *
     * @return $this
     */
    public function setDayBuyQuantity($day_buy_quantity)
    {
        $this->container['day_buy_quantity'] = $day_buy_quantity;

        return $this;
    }

    /**
     * Gets day_sell_value
     *
     * @return float
     */
    public function getDaySellValue()
    {
        return $this->container['day_sell_value'];
    }

    /**
     * Sets day_sell_value
     *
     * @param float $day_sell_value Amount at which the quantity is sold during the day
     *
     * @return $this
     */
    public function setDaySellValue($day_sell_value)
    {
        $this->container['day_sell_value'] = $day_sell_value;

        return $this;
    }

    /**
     * Gets day_sell_price
     *
     * @return float
     */
    public function getDaySellPrice()
    {
        return $this->container['day_sell_price'];
    }

    /**
     * Sets day_sell_price
     *
     * @param float $day_sell_price Average price at which the day quantity was sold
     *
     * @return $this
     */
    public function setDaySellPrice($day_sell_price)
    {
        $this->container['day_sell_price'] = $day_sell_price;

        return $this;
    }

    /**
     * Gets overnight_sell_amount
     *
     * @return float
     */
    public function getOvernightSellAmount()
    {
        return $this->container['overnight_sell_amount'];
    }

    /**
     * Sets overnight_sell_amount
     *
     * @param float $overnight_sell_amount Amount at which the quantity was sold in the previous session
     *
     * @return $this
     */
    public function setOvernightSellAmount($overnight_sell_amount)
    {
        $this->container['overnight_sell_amount'] = $overnight_sell_amount;

        return $this;
    }

    /**
     * Gets overnight_sell_quantity
     *
     * @return int
     */
    public function getOvernightSellQuantity()
    {
        return $this->container['overnight_sell_quantity'];
    }

    /**
     * Sets overnight_sell_quantity
     *
     * @param int $overnight_sell_quantity Quantity sold short in the previous session
     *
     * @return $this
     */
    public function setOvernightSellQuantity($overnight_sell_quantity)
    {
        $this->container['overnight_sell_quantity'] = $overnight_sell_quantity;

        return $this;
    }

    /**
     * Gets day_sell_quantity
     *
     * @return int
     */
    public function getDaySellQuantity()
    {
        return $this->container['day_sell_quantity'];
    }

    /**
     * Sets day_sell_quantity
     *
     * @param int $day_sell_quantity Quantity sold during the day
     *
     * @return $this
     */
    public function setDaySellQuantity($day_sell_quantity)
    {
        $this->container['day_sell_quantity'] = $day_sell_quantity;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Quantity left after nullifying Day and CF buy quantity towards Day and CF sell quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets last_price
     *
     * @return float
     */
    public function getLastPrice()
    {
        return $this->container['last_price'];
    }

    /**
     * Sets last_price
     *
     * @param float $last_price Last traded market price of the instrument
     *
     * @return $this
     */
    public function setLastPrice($last_price)
    {
        $this->container['last_price'] = $last_price;

        return $this;
    }

    /**
     * Gets unrealised
     *
     * @return float
     */
    public function getUnrealised()
    {
        return $this->container['unrealised'];
    }

    /**
     * Sets unrealised
     *
     * @param float $unrealised Day PnL generated against open positions
     *
     * @return $this
     */
    public function setUnrealised($unrealised)
    {
        $this->container['unrealised'] = $unrealised;

        return $this;
    }

    /**
     * Gets realised
     *
     * @return float
     */
    public function getRealised()
    {
        return $this->container['realised'];
    }

    /**
     * Sets realised
     *
     * @param float $realised Day PnL generated against closed positions
     *
     * @return $this
     */
    public function setRealised($realised)
    {
        $this->container['realised'] = $realised;

        return $this;
    }

    /**
     * Gets sell_value
     *
     * @return float
     */
    public function getSellValue()
    {
        return $this->container['sell_value'];
    }

    /**
     * Sets sell_value
     *
     * @param float $sell_value Net value of the sold quantities
     *
     * @return $this
     */
    public function setSellValue($sell_value)
    {
        $this->container['sell_value'] = $sell_value;

        return $this;
    }

    /**
     * Gets tradingsymbol
     *
     * @return string
     */
    public function getTradingsymbolDuplicate()
    {
        return $this->container['tradingsymbol'];
    }

    /**
     * Sets tradingsymbol
     *
     * @param string $tradingsymbol Shows the trading symbol of the instrument
     *
     * @return $this
     */
    public function setTradingsymbolDuplicate($tradingsymbol)
    {
        $this->container['tradingsymbol'] = $tradingsymbol;

        return $this;
    }

    /**
     * Gets trading_symbol
     *
     * @return string
     */
    public function getTradingSymbol()
    {
        return $this->container['trading_symbol'];
    }

    /**
     * Sets trading_symbol
     *
     * @param string $trading_symbol Shows the trading symbol of the instrument
     *
     * @return $this
     */
    public function setTradingSymbol($trading_symbol)
    {
        $this->container['trading_symbol'] = $trading_symbol;

        return $this;
    }

    /**
     * Gets close_price
     *
     * @return float
     */
    public function getClosePrice()
    {
        return $this->container['close_price'];
    }

    /**
     * Sets close_price
     *
     * @param float $close_price Closing price of the instrument from the last trading day
     *
     * @return $this
     */
    public function setClosePrice($close_price)
    {
        $this->container['close_price'] = $close_price;

        return $this;
    }

    /**
     * Gets buy_price
     *
     * @return float
     */
    public function getBuyPrice()
    {
        return $this->container['buy_price'];
    }

    /**
     * Sets buy_price
     *
     * @param float $buy_price Average price at which quantities were bought
     *
     * @return $this
     */
    public function setBuyPrice($buy_price)
    {
        $this->container['buy_price'] = $buy_price;

        return $this;
    }

    /**
     * Gets sell_price
     *
     * @return float
     */
    public function getSellPrice()
    {
        return $this->container['sell_price'];
    }

    /**
     * Sets sell_price
     *
     * @param float $sell_price Average price at which quantities were sold
     *
     * @return $this
     */
    public function setSellPrice($sell_price)
    {
        $this->container['sell_price'] = $sell_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
