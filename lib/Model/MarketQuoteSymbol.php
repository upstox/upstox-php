<?php
/**
 * MarketQuoteSymbol
 *
 * PHP version 5
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Upstox Developer API
 *
 * Build your App on the Upstox platform  ![Banner](https://api-v2.upstox.com/api-docs/images/banner.jpg \"banner\")  # Introduction  Upstox API is a set of rest APIs that provide data required to build a complete investment and trading platform. Execute orders in real time, manage user portfolio, stream live market data (using Websocket), and more, with the easy to understand API collection.  All requests are over HTTPS and the requests are sent with the content-type ‘application/json’. Developers have the option of choosing the response type as JSON or CSV for a few API calls.  To be able to use these APIs you need to create an App in the Developer Console and generate your **apiKey** and **apiSecret**. You can use a redirect URL which will be called after the login flow.  If you are a **trader**, you can directly create apps from Upstox mobile app or the desktop platform itself from **Apps** sections inside the **Account** Tab. Head over to <a href=\"http://account.upstox.com/developer/apps\" target=\"_blank\">account.upstox.com/developer/apps</a>.</br> If you are a **business** looking to integrate Upstox APIs, reach out to us and we will get a custom app created for you in no time.  It is highly recommended that you do not embed the **apiSecret** in your frontend app. Create a remote backend which does the handshake on behalf of the frontend app. Marking the apiSecret in the frontend app will make your app vulnerable to threats and potential issues.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Upstox\Client\Model;

use \ArrayAccess;
use \Upstox\Client\ObjectSerializer;

/**
 * MarketQuoteSymbol Class Doc Comment
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MarketQuoteSymbol implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MarketQuoteSymbol';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ohlc' => '\Upstox\Client\Model\Ohlc',
        'depth' => '\Upstox\Client\Model\DepthMap',
        'timestamp' => 'string',
        'instrument_token' => 'string',
        'symbol' => 'string',
        'last_price' => 'double',
        'volume' => 'int',
        'average_price' => 'double',
        'oi' => 'double',
        'net_change' => 'double',
        'total_buy_quantity' => 'double',
        'total_sell_quantity' => 'double',
        'lower_circuit_limit' => 'double',
        'upper_circuit_limit' => 'double',
        'last_trade_time' => 'string',
        'oi_day_high' => 'double',
        'oi_day_low' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ohlc' => null,
        'depth' => null,
        'timestamp' => null,
        'instrument_token' => null,
        'symbol' => null,
        'last_price' => 'double',
        'volume' => 'int64',
        'average_price' => 'double',
        'oi' => 'double',
        'net_change' => 'double',
        'total_buy_quantity' => 'double',
        'total_sell_quantity' => 'double',
        'lower_circuit_limit' => 'double',
        'upper_circuit_limit' => 'double',
        'last_trade_time' => null,
        'oi_day_high' => 'double',
        'oi_day_low' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ohlc' => 'ohlc',
        'depth' => 'depth',
        'timestamp' => 'timestamp',
        'instrument_token' => 'instrument_token',
        'symbol' => 'symbol',
        'last_price' => 'last_price',
        'volume' => 'volume',
        'average_price' => 'average_price',
        'oi' => 'oi',
        'net_change' => 'net_change',
        'total_buy_quantity' => 'total_buy_quantity',
        'total_sell_quantity' => 'total_sell_quantity',
        'lower_circuit_limit' => 'lower_circuit_limit',
        'upper_circuit_limit' => 'upper_circuit_limit',
        'last_trade_time' => 'last_trade_time',
        'oi_day_high' => 'oi_day_high',
        'oi_day_low' => 'oi_day_low'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ohlc' => 'setOhlc',
        'depth' => 'setDepth',
        'timestamp' => 'setTimestamp',
        'instrument_token' => 'setInstrumentToken',
        'symbol' => 'setSymbol',
        'last_price' => 'setLastPrice',
        'volume' => 'setVolume',
        'average_price' => 'setAveragePrice',
        'oi' => 'setOi',
        'net_change' => 'setNetChange',
        'total_buy_quantity' => 'setTotalBuyQuantity',
        'total_sell_quantity' => 'setTotalSellQuantity',
        'lower_circuit_limit' => 'setLowerCircuitLimit',
        'upper_circuit_limit' => 'setUpperCircuitLimit',
        'last_trade_time' => 'setLastTradeTime',
        'oi_day_high' => 'setOiDayHigh',
        'oi_day_low' => 'setOiDayLow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ohlc' => 'getOhlc',
        'depth' => 'getDepth',
        'timestamp' => 'getTimestamp',
        'instrument_token' => 'getInstrumentToken',
        'symbol' => 'getSymbol',
        'last_price' => 'getLastPrice',
        'volume' => 'getVolume',
        'average_price' => 'getAveragePrice',
        'oi' => 'getOi',
        'net_change' => 'getNetChange',
        'total_buy_quantity' => 'getTotalBuyQuantity',
        'total_sell_quantity' => 'getTotalSellQuantity',
        'lower_circuit_limit' => 'getLowerCircuitLimit',
        'upper_circuit_limit' => 'getUpperCircuitLimit',
        'last_trade_time' => 'getLastTradeTime',
        'oi_day_high' => 'getOiDayHigh',
        'oi_day_low' => 'getOiDayLow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ohlc'] = isset($data['ohlc']) ? $data['ohlc'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['instrument_token'] = isset($data['instrument_token']) ? $data['instrument_token'] : null;
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['last_price'] = isset($data['last_price']) ? $data['last_price'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['average_price'] = isset($data['average_price']) ? $data['average_price'] : null;
        $this->container['oi'] = isset($data['oi']) ? $data['oi'] : null;
        $this->container['net_change'] = isset($data['net_change']) ? $data['net_change'] : null;
        $this->container['total_buy_quantity'] = isset($data['total_buy_quantity']) ? $data['total_buy_quantity'] : null;
        $this->container['total_sell_quantity'] = isset($data['total_sell_quantity']) ? $data['total_sell_quantity'] : null;
        $this->container['lower_circuit_limit'] = isset($data['lower_circuit_limit']) ? $data['lower_circuit_limit'] : null;
        $this->container['upper_circuit_limit'] = isset($data['upper_circuit_limit']) ? $data['upper_circuit_limit'] : null;
        $this->container['last_trade_time'] = isset($data['last_trade_time']) ? $data['last_trade_time'] : null;
        $this->container['oi_day_high'] = isset($data['oi_day_high']) ? $data['oi_day_high'] : null;
        $this->container['oi_day_low'] = isset($data['oi_day_low']) ? $data['oi_day_low'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ohlc
     *
     * @return \Upstox\Client\Model\Ohlc
     */
    public function getOhlc()
    {
        return $this->container['ohlc'];
    }

    /**
     * Sets ohlc
     *
     * @param \Upstox\Client\Model\Ohlc $ohlc ohlc
     *
     * @return $this
     */
    public function setOhlc($ohlc)
    {
        $this->container['ohlc'] = $ohlc;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return \Upstox\Client\Model\DepthMap
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param \Upstox\Client\Model\DepthMap $depth depth
     *
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp Time in milliseconds at which the feeds was updated
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets instrument_token
     *
     * @return string
     */
    public function getInstrumentToken()
    {
        return $this->container['instrument_token'];
    }

    /**
     * Sets instrument_token
     *
     * @param string $instrument_token Key issued by Upstox for the instrument
     *
     * @return $this
     */
    public function setInstrumentToken($instrument_token)
    {
        $this->container['instrument_token'] = $instrument_token;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol Shows the trading symbol of the instrument
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets last_price
     *
     * @return double
     */
    public function getLastPrice()
    {
        return $this->container['last_price'];
    }

    /**
     * Sets last_price
     *
     * @param double $last_price The last traded price of symbol
     *
     * @return $this
     */
    public function setLastPrice($last_price)
    {
        $this->container['last_price'] = $last_price;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return int
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param int $volume The volume traded today on symbol
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets average_price
     *
     * @return double
     */
    public function getAveragePrice()
    {
        return $this->container['average_price'];
    }

    /**
     * Sets average_price
     *
     * @param double $average_price Average price
     *
     * @return $this
     */
    public function setAveragePrice($average_price)
    {
        $this->container['average_price'] = $average_price;

        return $this;
    }

    /**
     * Gets oi
     *
     * @return double
     */
    public function getOi()
    {
        return $this->container['oi'];
    }

    /**
     * Sets oi
     *
     * @param double $oi Total number of outstanding contracts held by market participants exchange-wide (only F&O)
     *
     * @return $this
     */
    public function setOi($oi)
    {
        $this->container['oi'] = $oi;

        return $this;
    }

    /**
     * Gets net_change
     *
     * @return double
     */
    public function getNetChange()
    {
        return $this->container['net_change'];
    }

    /**
     * Sets net_change
     *
     * @param double $net_change The absolute change from yesterday's close to last traded price
     *
     * @return $this
     */
    public function setNetChange($net_change)
    {
        $this->container['net_change'] = $net_change;

        return $this;
    }

    /**
     * Gets total_buy_quantity
     *
     * @return double
     */
    public function getTotalBuyQuantity()
    {
        return $this->container['total_buy_quantity'];
    }

    /**
     * Sets total_buy_quantity
     *
     * @param double $total_buy_quantity The total number of bid quantity available for trading
     *
     * @return $this
     */
    public function setTotalBuyQuantity($total_buy_quantity)
    {
        $this->container['total_buy_quantity'] = $total_buy_quantity;

        return $this;
    }

    /**
     * Gets total_sell_quantity
     *
     * @return double
     */
    public function getTotalSellQuantity()
    {
        return $this->container['total_sell_quantity'];
    }

    /**
     * Sets total_sell_quantity
     *
     * @param double $total_sell_quantity The total number of ask quantity available for trading
     *
     * @return $this
     */
    public function setTotalSellQuantity($total_sell_quantity)
    {
        $this->container['total_sell_quantity'] = $total_sell_quantity;

        return $this;
    }

    /**
     * Gets lower_circuit_limit
     *
     * @return double
     */
    public function getLowerCircuitLimit()
    {
        return $this->container['lower_circuit_limit'];
    }

    /**
     * Sets lower_circuit_limit
     *
     * @param double $lower_circuit_limit The lower circuit of symbol
     *
     * @return $this
     */
    public function setLowerCircuitLimit($lower_circuit_limit)
    {
        $this->container['lower_circuit_limit'] = $lower_circuit_limit;

        return $this;
    }

    /**
     * Gets upper_circuit_limit
     *
     * @return double
     */
    public function getUpperCircuitLimit()
    {
        return $this->container['upper_circuit_limit'];
    }

    /**
     * Sets upper_circuit_limit
     *
     * @param double $upper_circuit_limit The upper circuit of symbol
     *
     * @return $this
     */
    public function setUpperCircuitLimit($upper_circuit_limit)
    {
        $this->container['upper_circuit_limit'] = $upper_circuit_limit;

        return $this;
    }

    /**
     * Gets last_trade_time
     *
     * @return string
     */
    public function getLastTradeTime()
    {
        return $this->container['last_trade_time'];
    }

    /**
     * Sets last_trade_time
     *
     * @param string $last_trade_time Time in milliseconds at which last trade happened
     *
     * @return $this
     */
    public function setLastTradeTime($last_trade_time)
    {
        $this->container['last_trade_time'] = $last_trade_time;

        return $this;
    }

    /**
     * Gets oi_day_high
     *
     * @return double
     */
    public function getOiDayHigh()
    {
        return $this->container['oi_day_high'];
    }

    /**
     * Sets oi_day_high
     *
     * @param double $oi_day_high oi_day_high
     *
     * @return $this
     */
    public function setOiDayHigh($oi_day_high)
    {
        $this->container['oi_day_high'] = $oi_day_high;

        return $this;
    }

    /**
     * Gets oi_day_low
     *
     * @return double
     */
    public function getOiDayLow()
    {
        return $this->container['oi_day_low'];
    }

    /**
     * Sets oi_day_low
     *
     * @param double $oi_day_low oi_day_low
     *
     * @return $this
     */
    public function setOiDayLow($oi_day_low)
    {
        $this->container['oi_day_low'] = $oi_day_low;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
