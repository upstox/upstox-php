<?php
/**
 * ExpiredFutureData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Upstox\Client\Model;

use \ArrayAccess;
use \Upstox\Client\ObjectSerializer;

/**
 * ExpiredFutureData Class Doc Comment
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExpiredFutureData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExpiredFutureData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'segment' => 'string',
        'exchange' => 'string',
        'expiry' => 'string',
        'instrument_key' => 'string',
        'exchange_token' => 'string',
        'trading_symbol' => 'string',
        'tick_size' => 'double',
        'lot_size' => 'int',
        'instrument_type' => 'string',
        'freeze_quantity' => 'double',
        'underlying_key' => 'string',
        'underlying_type' => 'string',
        'underlying_symbol' => 'string',
        'minimum_lot' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'segment' => null,
        'exchange' => null,
        'expiry' => null,
        'instrument_key' => null,
        'exchange_token' => null,
        'trading_symbol' => null,
        'tick_size' => 'double',
        'lot_size' => 'int64',
        'instrument_type' => null,
        'freeze_quantity' => 'double',
        'underlying_key' => null,
        'underlying_type' => null,
        'underlying_symbol' => null,
        'minimum_lot' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'segment' => 'segment',
        'exchange' => 'exchange',
        'expiry' => 'expiry',
        'instrument_key' => 'instrument_key',
        'exchange_token' => 'exchange_token',
        'trading_symbol' => 'trading_symbol',
        'tick_size' => 'tick_size',
        'lot_size' => 'lot_size',
        'instrument_type' => 'instrument_type',
        'freeze_quantity' => 'freeze_quantity',
        'underlying_key' => 'underlying_key',
        'underlying_type' => 'underlying_type',
        'underlying_symbol' => 'underlying_symbol',
        'minimum_lot' => 'minimum_lot'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'segment' => 'setSegment',
        'exchange' => 'setExchange',
        'expiry' => 'setExpiry',
        'instrument_key' => 'setInstrumentKey',
        'exchange_token' => 'setExchangeToken',
        'trading_symbol' => 'setTradingSymbol',
        'tick_size' => 'setTickSize',
        'lot_size' => 'setLotSize',
        'instrument_type' => 'setInstrumentType',
        'freeze_quantity' => 'setFreezeQuantity',
        'underlying_key' => 'setUnderlyingKey',
        'underlying_type' => 'setUnderlyingType',
        'underlying_symbol' => 'setUnderlyingSymbol',
        'minimum_lot' => 'setMinimumLot'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'segment' => 'getSegment',
        'exchange' => 'getExchange',
        'expiry' => 'getExpiry',
        'instrument_key' => 'getInstrumentKey',
        'exchange_token' => 'getExchangeToken',
        'trading_symbol' => 'getTradingSymbol',
        'tick_size' => 'getTickSize',
        'lot_size' => 'getLotSize',
        'instrument_type' => 'getInstrumentType',
        'freeze_quantity' => 'getFreezeQuantity',
        'underlying_key' => 'getUnderlyingKey',
        'underlying_type' => 'getUnderlyingType',
        'underlying_symbol' => 'getUnderlyingSymbol',
        'minimum_lot' => 'getMinimumLot'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['segment'] = isset($data['segment']) ? $data['segment'] : null;
        $this->container['exchange'] = isset($data['exchange']) ? $data['exchange'] : null;
        $this->container['expiry'] = isset($data['expiry']) ? $data['expiry'] : null;
        $this->container['instrument_key'] = isset($data['instrument_key']) ? $data['instrument_key'] : null;
        $this->container['exchange_token'] = isset($data['exchange_token']) ? $data['exchange_token'] : null;
        $this->container['trading_symbol'] = isset($data['trading_symbol']) ? $data['trading_symbol'] : null;
        $this->container['tick_size'] = isset($data['tick_size']) ? $data['tick_size'] : null;
        $this->container['lot_size'] = isset($data['lot_size']) ? $data['lot_size'] : null;
        $this->container['instrument_type'] = isset($data['instrument_type']) ? $data['instrument_type'] : null;
        $this->container['freeze_quantity'] = isset($data['freeze_quantity']) ? $data['freeze_quantity'] : null;
        $this->container['underlying_key'] = isset($data['underlying_key']) ? $data['underlying_key'] : null;
        $this->container['underlying_type'] = isset($data['underlying_type']) ? $data['underlying_type'] : null;
        $this->container['underlying_symbol'] = isset($data['underlying_symbol']) ? $data['underlying_symbol'] : null;
        $this->container['minimum_lot'] = isset($data['minimum_lot']) ? $data['minimum_lot'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the instrument
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets segment
     *
     * @return string
     */
    public function getSegment()
    {
        return $this->container['segment'];
    }

    /**
     * Sets segment
     *
     * @param string $segment Segment of the instrument
     *
     * @return $this
     */
    public function setSegment($segment)
    {
        $this->container['segment'] = $segment;

        return $this;
    }

    /**
     * Gets exchange
     *
     * @return string
     */
    public function getExchange()
    {
        return $this->container['exchange'];
    }

    /**
     * Sets exchange
     *
     * @param string $exchange Exchange of the instrument
     *
     * @return $this
     */
    public function setExchange($exchange)
    {
        $this->container['exchange'] = $exchange;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return string
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param string $expiry Expiry date of the instrument
     *
     * @return $this
     */
    public function setExpiry($expiry)
    {
        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets instrument_key
     *
     * @return string
     */
    public function getInstrumentKey()
    {
        return $this->container['instrument_key'];
    }

    /**
     * Sets instrument_key
     *
     * @param string $instrument_key Unique key identifying the instrument
     *
     * @return $this
     */
    public function setInstrumentKey($instrument_key)
    {
        $this->container['instrument_key'] = $instrument_key;

        return $this;
    }

    /**
     * Gets exchange_token
     *
     * @return string
     */
    public function getExchangeToken()
    {
        return $this->container['exchange_token'];
    }

    /**
     * Sets exchange_token
     *
     * @param string $exchange_token Token assigned by the exchange
     *
     * @return $this
     */
    public function setExchangeToken($exchange_token)
    {
        $this->container['exchange_token'] = $exchange_token;

        return $this;
    }

    /**
     * Gets trading_symbol
     *
     * @return string
     */
    public function getTradingSymbol()
    {
        return $this->container['trading_symbol'];
    }

    /**
     * Sets trading_symbol
     *
     * @param string $trading_symbol Symbol used for trading
     *
     * @return $this
     */
    public function setTradingSymbol($trading_symbol)
    {
        $this->container['trading_symbol'] = $trading_symbol;

        return $this;
    }

    /**
     * Gets tick_size
     *
     * @return double
     */
    public function getTickSize()
    {
        return $this->container['tick_size'];
    }

    /**
     * Sets tick_size
     *
     * @param double $tick_size Minimum price movement
     *
     * @return $this
     */
    public function setTickSize($tick_size)
    {
        $this->container['tick_size'] = $tick_size;

        return $this;
    }

    /**
     * Gets lot_size
     *
     * @return int
     */
    public function getLotSize()
    {
        return $this->container['lot_size'];
    }

    /**
     * Sets lot_size
     *
     * @param int $lot_size Number of units per lot
     *
     * @return $this
     */
    public function setLotSize($lot_size)
    {
        $this->container['lot_size'] = $lot_size;

        return $this;
    }

    /**
     * Gets instrument_type
     *
     * @return string
     */
    public function getInstrumentType()
    {
        return $this->container['instrument_type'];
    }

    /**
     * Sets instrument_type
     *
     * @param string $instrument_type Type of the instrument
     *
     * @return $this
     */
    public function setInstrumentType($instrument_type)
    {
        $this->container['instrument_type'] = $instrument_type;

        return $this;
    }

    /**
     * Gets freeze_quantity
     *
     * @return double
     */
    public function getFreezeQuantity()
    {
        return $this->container['freeze_quantity'];
    }

    /**
     * Sets freeze_quantity
     *
     * @param double $freeze_quantity Maximum allowed quantity
     *
     * @return $this
     */
    public function setFreezeQuantity($freeze_quantity)
    {
        $this->container['freeze_quantity'] = $freeze_quantity;

        return $this;
    }

    /**
     * Gets underlying_key
     *
     * @return string
     */
    public function getUnderlyingKey()
    {
        return $this->container['underlying_key'];
    }

    /**
     * Sets underlying_key
     *
     * @param string $underlying_key Key of the underlying asset
     *
     * @return $this
     */
    public function setUnderlyingKey($underlying_key)
    {
        $this->container['underlying_key'] = $underlying_key;

        return $this;
    }

    /**
     * Gets underlying_type
     *
     * @return string
     */
    public function getUnderlyingType()
    {
        return $this->container['underlying_type'];
    }

    /**
     * Sets underlying_type
     *
     * @param string $underlying_type Type of the underlying asset
     *
     * @return $this
     */
    public function setUnderlyingType($underlying_type)
    {
        $this->container['underlying_type'] = $underlying_type;

        return $this;
    }

    /**
     * Gets underlying_symbol
     *
     * @return string
     */
    public function getUnderlyingSymbol()
    {
        return $this->container['underlying_symbol'];
    }

    /**
     * Sets underlying_symbol
     *
     * @param string $underlying_symbol Symbol of the underlying asset
     *
     * @return $this
     */
    public function setUnderlyingSymbol($underlying_symbol)
    {
        $this->container['underlying_symbol'] = $underlying_symbol;

        return $this;
    }

    /**
     * Gets minimum_lot
     *
     * @return int
     */
    public function getMinimumLot()
    {
        return $this->container['minimum_lot'];
    }

    /**
     * Sets minimum_lot
     *
     * @param int $minimum_lot Minimum lot size
     *
     * @return $this
     */
    public function setMinimumLot($minimum_lot)
    {
        $this->container['minimum_lot'] = $minimum_lot;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
