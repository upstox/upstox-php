<?php
/**
 * CancelOrExitOrderErrorData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Upstox\Client\Model;

use \ArrayAccess;
use \Upstox\Client\ObjectSerializer;

/**
 * CancelOrExitOrderErrorData Class Doc Comment
 *
 * @category Class
 * @description Error data for cancel or exit order request
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CancelOrExitOrderErrorData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CancelOrExitOrderErrorData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'error_code' => 'string',
        'message' => 'string',
        'property_path' => 'string',
        'invalid_value' => 'object',
        'error_code' => 'string',
        'property_path' => 'string',
        'invalid_value' => 'object',
        'instrument_key' => 'string',
        'order_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'error_code' => null,
        'message' => null,
        'property_path' => null,
        'invalid_value' => null,
        'error_code' => null,
        'property_path' => null,
        'invalid_value' => null,
        'instrument_key' => null,
        'order_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error_code' => 'errorCode',
        'message' => 'message',
        'property_path' => 'propertyPath',
        'invalid_value' => 'invalidValue',
        'error_code' => 'error_code',
        'property_path' => 'property_path',
        'invalid_value' => 'invalid_value',
        'instrument_key' => 'instrument_key',
        'order_id' => 'order_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error_code' => 'setErrorCode',
        'message' => 'setMessage',
        'property_path' => 'setPropertyPath',
        'invalid_value' => 'setInvalidValue',
        'error_code' => 'setErrorCode',
        'property_path' => 'setPropertyPath',
        'invalid_value' => 'setInvalidValue',
        'instrument_key' => 'setInstrumentKey',
        'order_id' => 'setOrderId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error_code' => 'getErrorCode',
        'message' => 'getMessage',
        'property_path' => 'getPropertyPath',
        'invalid_value' => 'getInvalidValue',
        'error_code' => 'getErrorCode',
        'property_path' => 'getPropertyPath',
        'invalid_value' => 'getInvalidValue',
        'instrument_key' => 'getInstrumentKey',
        'order_id' => 'getOrderId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['property_path'] = isset($data['property_path']) ? $data['property_path'] : null;
        $this->container['invalid_value'] = isset($data['invalid_value']) ? $data['invalid_value'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['property_path'] = isset($data['property_path']) ? $data['property_path'] : null;
        $this->container['invalid_value'] = isset($data['invalid_value']) ? $data['invalid_value'] : null;
        $this->container['instrument_key'] = isset($data['instrument_key']) ? $data['instrument_key'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets error_code
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string $error_code Unique code for the error state
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Verbose message for the error state
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets property_path
     *
     * @return string
     */
    public function getPropertyPath()
    {
        return $this->container['property_path'];
    }

    /**
     * Sets property_path
     *
     * @param string $property_path Path to property failing validation
     *
     * @return $this
     */
    public function setPropertyPath($property_path)
    {
        $this->container['property_path'] = $property_path;

        return $this;
    }

    /**
     * Gets invalid_value
     *
     * @return object
     */
    public function getInvalidValue()
    {
        return $this->container['invalid_value'];
    }

    /**
     * Sets invalid_value
     *
     * @param object $invalid_value Invalid value for the property failing validation
     *
     * @return $this
     */
    public function setInvalidValue($invalid_value)
    {
        $this->container['invalid_value'] = $invalid_value;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string $error_code error_code
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets property_path
     *
     * @return string
     */
    public function getPropertyPath()
    {
        return $this->container['property_path'];
    }

    /**
     * Sets property_path
     *
     * @param string $property_path property_path
     *
     * @return $this
     */
    public function setPropertyPath($property_path)
    {
        $this->container['property_path'] = $property_path;

        return $this;
    }

    /**
     * Gets invalid_value
     *
     * @return object
     */
    public function getInvalidValue()
    {
        return $this->container['invalid_value'];
    }

    /**
     * Sets invalid_value
     *
     * @param object $invalid_value invalid_value
     *
     * @return $this
     */
    public function setInvalidValue($invalid_value)
    {
        $this->container['invalid_value'] = $invalid_value;

        return $this;
    }

    /**
     * Gets instrument_key
     *
     * @return string
     */
    public function getInstrumentKey()
    {
        return $this->container['instrument_key'];
    }

    /**
     * Sets instrument_key
     *
     * @param string $instrument_key Key of instrument
     *
     * @return $this
     */
    public function setInstrumentKey($instrument_key)
    {
        $this->container['instrument_key'] = $instrument_key;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Reference order ID
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
