<?php
/**
 * InstrumentData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Upstox\Client\Model;

use \ArrayAccess;
use \Upstox\Client\ObjectSerializer;

/**
 * InstrumentData Class Doc Comment
 *
 * @category Class
 * @description Response data for option contracts
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InstrumentData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstrumentData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'segment' => 'string',
        'exchange' => 'string',
        'isin' => 'string',
        'expiry' => '\DateTime',
        'country' => 'string',
        'latency' => 'string',
        'description' => 'string',
        'currency' => 'string',
        'weekly' => 'bool',
        'instrument_key' => 'string',
        'exchange_token' => 'string',
        'trading_symbol' => 'string',
        'short_name' => 'string',
        'tick_size' => 'double',
        'lot_size' => 'int',
        'instrument_type' => 'string',
        'freeze_quantity' => 'double',
        'underlying_key' => 'string',
        'underlying_type' => 'string',
        'underlying_symbol' => 'string',
        'last_trading_date' => '\DateTime',
        'strike_price' => 'double',
        'price_quote_unit' => 'string',
        'qty_multiplier' => 'int',
        'minimum_lot' => 'int',
        'start_time' => 'string',
        'end_time' => 'string',
        'week_days' => 'string',
        'general_denominator' => 'double',
        'general_numerator' => 'double',
        'price_numerator' => 'double',
        'price_denominator' => 'double',
        'mtf_enabled' => 'bool',
        'mtf_bracket' => 'double',
        'security_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'segment' => null,
        'exchange' => null,
        'isin' => null,
        'expiry' => 'date-time',
        'country' => null,
        'latency' => null,
        'description' => null,
        'currency' => null,
        'weekly' => null,
        'instrument_key' => null,
        'exchange_token' => null,
        'trading_symbol' => null,
        'short_name' => null,
        'tick_size' => 'double',
        'lot_size' => 'int64',
        'instrument_type' => null,
        'freeze_quantity' => 'double',
        'underlying_key' => null,
        'underlying_type' => null,
        'underlying_symbol' => null,
        'last_trading_date' => 'date-time',
        'strike_price' => 'double',
        'price_quote_unit' => null,
        'qty_multiplier' => 'int64',
        'minimum_lot' => 'int64',
        'start_time' => null,
        'end_time' => null,
        'week_days' => null,
        'general_denominator' => 'double',
        'general_numerator' => 'double',
        'price_numerator' => 'double',
        'price_denominator' => 'double',
        'mtf_enabled' => null,
        'mtf_bracket' => 'double',
        'security_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'segment' => 'segment',
        'exchange' => 'exchange',
        'isin' => 'isin',
        'expiry' => 'expiry',
        'country' => 'country',
        'latency' => 'latency',
        'description' => 'description',
        'currency' => 'currency',
        'weekly' => 'weekly',
        'instrument_key' => 'instrument_key',
        'exchange_token' => 'exchange_token',
        'trading_symbol' => 'trading_symbol',
        'short_name' => 'short_name',
        'tick_size' => 'tick_size',
        'lot_size' => 'lot_size',
        'instrument_type' => 'instrument_type',
        'freeze_quantity' => 'freeze_quantity',
        'underlying_key' => 'underlying_key',
        'underlying_type' => 'underlying_type',
        'underlying_symbol' => 'underlying_symbol',
        'last_trading_date' => 'last_trading_date',
        'strike_price' => 'strike_price',
        'price_quote_unit' => 'price_quote_unit',
        'qty_multiplier' => 'qty_multiplier',
        'minimum_lot' => 'minimum_lot',
        'start_time' => 'start_time',
        'end_time' => 'end_time',
        'week_days' => 'week_days',
        'general_denominator' => 'general_denominator',
        'general_numerator' => 'general_numerator',
        'price_numerator' => 'price_numerator',
        'price_denominator' => 'price_denominator',
        'mtf_enabled' => 'mtf_enabled',
        'mtf_bracket' => 'mtf_bracket',
        'security_type' => 'security_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'segment' => 'setSegment',
        'exchange' => 'setExchange',
        'isin' => 'setIsin',
        'expiry' => 'setExpiry',
        'country' => 'setCountry',
        'latency' => 'setLatency',
        'description' => 'setDescription',
        'currency' => 'setCurrency',
        'weekly' => 'setWeekly',
        'instrument_key' => 'setInstrumentKey',
        'exchange_token' => 'setExchangeToken',
        'trading_symbol' => 'setTradingSymbol',
        'short_name' => 'setShortName',
        'tick_size' => 'setTickSize',
        'lot_size' => 'setLotSize',
        'instrument_type' => 'setInstrumentType',
        'freeze_quantity' => 'setFreezeQuantity',
        'underlying_key' => 'setUnderlyingKey',
        'underlying_type' => 'setUnderlyingType',
        'underlying_symbol' => 'setUnderlyingSymbol',
        'last_trading_date' => 'setLastTradingDate',
        'strike_price' => 'setStrikePrice',
        'price_quote_unit' => 'setPriceQuoteUnit',
        'qty_multiplier' => 'setQtyMultiplier',
        'minimum_lot' => 'setMinimumLot',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'week_days' => 'setWeekDays',
        'general_denominator' => 'setGeneralDenominator',
        'general_numerator' => 'setGeneralNumerator',
        'price_numerator' => 'setPriceNumerator',
        'price_denominator' => 'setPriceDenominator',
        'mtf_enabled' => 'setMtfEnabled',
        'mtf_bracket' => 'setMtfBracket',
        'security_type' => 'setSecurityType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'segment' => 'getSegment',
        'exchange' => 'getExchange',
        'isin' => 'getIsin',
        'expiry' => 'getExpiry',
        'country' => 'getCountry',
        'latency' => 'getLatency',
        'description' => 'getDescription',
        'currency' => 'getCurrency',
        'weekly' => 'getWeekly',
        'instrument_key' => 'getInstrumentKey',
        'exchange_token' => 'getExchangeToken',
        'trading_symbol' => 'getTradingSymbol',
        'short_name' => 'getShortName',
        'tick_size' => 'getTickSize',
        'lot_size' => 'getLotSize',
        'instrument_type' => 'getInstrumentType',
        'freeze_quantity' => 'getFreezeQuantity',
        'underlying_key' => 'getUnderlyingKey',
        'underlying_type' => 'getUnderlyingType',
        'underlying_symbol' => 'getUnderlyingSymbol',
        'last_trading_date' => 'getLastTradingDate',
        'strike_price' => 'getStrikePrice',
        'price_quote_unit' => 'getPriceQuoteUnit',
        'qty_multiplier' => 'getQtyMultiplier',
        'minimum_lot' => 'getMinimumLot',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'week_days' => 'getWeekDays',
        'general_denominator' => 'getGeneralDenominator',
        'general_numerator' => 'getGeneralNumerator',
        'price_numerator' => 'getPriceNumerator',
        'price_denominator' => 'getPriceDenominator',
        'mtf_enabled' => 'getMtfEnabled',
        'mtf_bracket' => 'getMtfBracket',
        'security_type' => 'getSecurityType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['segment'] = isset($data['segment']) ? $data['segment'] : null;
        $this->container['exchange'] = isset($data['exchange']) ? $data['exchange'] : null;
        $this->container['isin'] = isset($data['isin']) ? $data['isin'] : null;
        $this->container['expiry'] = isset($data['expiry']) ? $data['expiry'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['latency'] = isset($data['latency']) ? $data['latency'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['weekly'] = isset($data['weekly']) ? $data['weekly'] : null;
        $this->container['instrument_key'] = isset($data['instrument_key']) ? $data['instrument_key'] : null;
        $this->container['exchange_token'] = isset($data['exchange_token']) ? $data['exchange_token'] : null;
        $this->container['trading_symbol'] = isset($data['trading_symbol']) ? $data['trading_symbol'] : null;
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['tick_size'] = isset($data['tick_size']) ? $data['tick_size'] : null;
        $this->container['lot_size'] = isset($data['lot_size']) ? $data['lot_size'] : null;
        $this->container['instrument_type'] = isset($data['instrument_type']) ? $data['instrument_type'] : null;
        $this->container['freeze_quantity'] = isset($data['freeze_quantity']) ? $data['freeze_quantity'] : null;
        $this->container['underlying_key'] = isset($data['underlying_key']) ? $data['underlying_key'] : null;
        $this->container['underlying_type'] = isset($data['underlying_type']) ? $data['underlying_type'] : null;
        $this->container['underlying_symbol'] = isset($data['underlying_symbol']) ? $data['underlying_symbol'] : null;
        $this->container['last_trading_date'] = isset($data['last_trading_date']) ? $data['last_trading_date'] : null;
        $this->container['strike_price'] = isset($data['strike_price']) ? $data['strike_price'] : null;
        $this->container['price_quote_unit'] = isset($data['price_quote_unit']) ? $data['price_quote_unit'] : null;
        $this->container['qty_multiplier'] = isset($data['qty_multiplier']) ? $data['qty_multiplier'] : null;
        $this->container['minimum_lot'] = isset($data['minimum_lot']) ? $data['minimum_lot'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['week_days'] = isset($data['week_days']) ? $data['week_days'] : null;
        $this->container['general_denominator'] = isset($data['general_denominator']) ? $data['general_denominator'] : null;
        $this->container['general_numerator'] = isset($data['general_numerator']) ? $data['general_numerator'] : null;
        $this->container['price_numerator'] = isset($data['price_numerator']) ? $data['price_numerator'] : null;
        $this->container['price_denominator'] = isset($data['price_denominator']) ? $data['price_denominator'] : null;
        $this->container['mtf_enabled'] = isset($data['mtf_enabled']) ? $data['mtf_enabled'] : null;
        $this->container['mtf_bracket'] = isset($data['mtf_bracket']) ? $data['mtf_bracket'] : null;
        $this->container['security_type'] = isset($data['security_type']) ? $data['security_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets segment
     *
     * @return string
     */
    public function getSegment()
    {
        return $this->container['segment'];
    }

    /**
     * Sets segment
     *
     * @param string $segment segment
     *
     * @return $this
     */
    public function setSegment($segment)
    {
        $this->container['segment'] = $segment;

        return $this;
    }

    /**
     * Gets exchange
     *
     * @return string
     */
    public function getExchange()
    {
        return $this->container['exchange'];
    }

    /**
     * Sets exchange
     *
     * @param string $exchange exchange
     *
     * @return $this
     */
    public function setExchange($exchange)
    {
        $this->container['exchange'] = $exchange;

        return $this;
    }

    /**
     * Gets isin
     *
     * @return string
     */
    public function getIsin()
    {
        return $this->container['isin'];
    }

    /**
     * Sets isin
     *
     * @param string $isin isin
     *
     * @return $this
     */
    public function setIsin($isin)
    {
        $this->container['isin'] = $isin;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return \DateTime
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param \DateTime $expiry expiry
     *
     * @return $this
     */
    public function setExpiry($expiry)
    {
        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets latency
     *
     * @return string
     */
    public function getLatency()
    {
        return $this->container['latency'];
    }

    /**
     * Sets latency
     *
     * @param string $latency latency
     *
     * @return $this
     */
    public function setLatency($latency)
    {
        $this->container['latency'] = $latency;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets weekly
     *
     * @return bool
     */
    public function getWeekly()
    {
        return $this->container['weekly'];
    }

    /**
     * Sets weekly
     *
     * @param bool $weekly weekly
     *
     * @return $this
     */
    public function setWeekly($weekly)
    {
        $this->container['weekly'] = $weekly;

        return $this;
    }

    /**
     * Gets instrument_key
     *
     * @return string
     */
    public function getInstrumentKey()
    {
        return $this->container['instrument_key'];
    }

    /**
     * Sets instrument_key
     *
     * @param string $instrument_key instrument_key
     *
     * @return $this
     */
    public function setInstrumentKey($instrument_key)
    {
        $this->container['instrument_key'] = $instrument_key;

        return $this;
    }

    /**
     * Gets exchange_token
     *
     * @return string
     */
    public function getExchangeToken()
    {
        return $this->container['exchange_token'];
    }

    /**
     * Sets exchange_token
     *
     * @param string $exchange_token exchange_token
     *
     * @return $this
     */
    public function setExchangeToken($exchange_token)
    {
        $this->container['exchange_token'] = $exchange_token;

        return $this;
    }

    /**
     * Gets trading_symbol
     *
     * @return string
     */
    public function getTradingSymbol()
    {
        return $this->container['trading_symbol'];
    }

    /**
     * Sets trading_symbol
     *
     * @param string $trading_symbol trading_symbol
     *
     * @return $this
     */
    public function setTradingSymbol($trading_symbol)
    {
        $this->container['trading_symbol'] = $trading_symbol;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name short_name
     *
     * @return $this
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets tick_size
     *
     * @return double
     */
    public function getTickSize()
    {
        return $this->container['tick_size'];
    }

    /**
     * Sets tick_size
     *
     * @param double $tick_size tick_size
     *
     * @return $this
     */
    public function setTickSize($tick_size)
    {
        $this->container['tick_size'] = $tick_size;

        return $this;
    }

    /**
     * Gets lot_size
     *
     * @return int
     */
    public function getLotSize()
    {
        return $this->container['lot_size'];
    }

    /**
     * Sets lot_size
     *
     * @param int $lot_size lot_size
     *
     * @return $this
     */
    public function setLotSize($lot_size)
    {
        $this->container['lot_size'] = $lot_size;

        return $this;
    }

    /**
     * Gets instrument_type
     *
     * @return string
     */
    public function getInstrumentType()
    {
        return $this->container['instrument_type'];
    }

    /**
     * Sets instrument_type
     *
     * @param string $instrument_type instrument_type
     *
     * @return $this
     */
    public function setInstrumentType($instrument_type)
    {
        $this->container['instrument_type'] = $instrument_type;

        return $this;
    }

    /**
     * Gets freeze_quantity
     *
     * @return double
     */
    public function getFreezeQuantity()
    {
        return $this->container['freeze_quantity'];
    }

    /**
     * Sets freeze_quantity
     *
     * @param double $freeze_quantity freeze_quantity
     *
     * @return $this
     */
    public function setFreezeQuantity($freeze_quantity)
    {
        $this->container['freeze_quantity'] = $freeze_quantity;

        return $this;
    }

    /**
     * Gets underlying_key
     *
     * @return string
     */
    public function getUnderlyingKey()
    {
        return $this->container['underlying_key'];
    }

    /**
     * Sets underlying_key
     *
     * @param string $underlying_key underlying_key
     *
     * @return $this
     */
    public function setUnderlyingKey($underlying_key)
    {
        $this->container['underlying_key'] = $underlying_key;

        return $this;
    }

    /**
     * Gets underlying_type
     *
     * @return string
     */
    public function getUnderlyingType()
    {
        return $this->container['underlying_type'];
    }

    /**
     * Sets underlying_type
     *
     * @param string $underlying_type underlying_type
     *
     * @return $this
     */
    public function setUnderlyingType($underlying_type)
    {
        $this->container['underlying_type'] = $underlying_type;

        return $this;
    }

    /**
     * Gets underlying_symbol
     *
     * @return string
     */
    public function getUnderlyingSymbol()
    {
        return $this->container['underlying_symbol'];
    }

    /**
     * Sets underlying_symbol
     *
     * @param string $underlying_symbol underlying_symbol
     *
     * @return $this
     */
    public function setUnderlyingSymbol($underlying_symbol)
    {
        $this->container['underlying_symbol'] = $underlying_symbol;

        return $this;
    }

    /**
     * Gets last_trading_date
     *
     * @return \DateTime
     */
    public function getLastTradingDate()
    {
        return $this->container['last_trading_date'];
    }

    /**
     * Sets last_trading_date
     *
     * @param \DateTime $last_trading_date last_trading_date
     *
     * @return $this
     */
    public function setLastTradingDate($last_trading_date)
    {
        $this->container['last_trading_date'] = $last_trading_date;

        return $this;
    }

    /**
     * Gets strike_price
     *
     * @return double
     */
    public function getStrikePrice()
    {
        return $this->container['strike_price'];
    }

    /**
     * Sets strike_price
     *
     * @param double $strike_price strike_price
     *
     * @return $this
     */
    public function setStrikePrice($strike_price)
    {
        $this->container['strike_price'] = $strike_price;

        return $this;
    }

    /**
     * Gets price_quote_unit
     *
     * @return string
     */
    public function getPriceQuoteUnit()
    {
        return $this->container['price_quote_unit'];
    }

    /**
     * Sets price_quote_unit
     *
     * @param string $price_quote_unit price_quote_unit
     *
     * @return $this
     */
    public function setPriceQuoteUnit($price_quote_unit)
    {
        $this->container['price_quote_unit'] = $price_quote_unit;

        return $this;
    }

    /**
     * Gets qty_multiplier
     *
     * @return int
     */
    public function getQtyMultiplier()
    {
        return $this->container['qty_multiplier'];
    }

    /**
     * Sets qty_multiplier
     *
     * @param int $qty_multiplier qty_multiplier
     *
     * @return $this
     */
    public function setQtyMultiplier($qty_multiplier)
    {
        $this->container['qty_multiplier'] = $qty_multiplier;

        return $this;
    }

    /**
     * Gets minimum_lot
     *
     * @return int
     */
    public function getMinimumLot()
    {
        return $this->container['minimum_lot'];
    }

    /**
     * Sets minimum_lot
     *
     * @param int $minimum_lot minimum_lot
     *
     * @return $this
     */
    public function setMinimumLot($minimum_lot)
    {
        $this->container['minimum_lot'] = $minimum_lot;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets week_days
     *
     * @return string
     */
    public function getWeekDays()
    {
        return $this->container['week_days'];
    }

    /**
     * Sets week_days
     *
     * @param string $week_days week_days
     *
     * @return $this
     */
    public function setWeekDays($week_days)
    {
        $this->container['week_days'] = $week_days;

        return $this;
    }

    /**
     * Gets general_denominator
     *
     * @return double
     */
    public function getGeneralDenominator()
    {
        return $this->container['general_denominator'];
    }

    /**
     * Sets general_denominator
     *
     * @param double $general_denominator general_denominator
     *
     * @return $this
     */
    public function setGeneralDenominator($general_denominator)
    {
        $this->container['general_denominator'] = $general_denominator;

        return $this;
    }

    /**
     * Gets general_numerator
     *
     * @return double
     */
    public function getGeneralNumerator()
    {
        return $this->container['general_numerator'];
    }

    /**
     * Sets general_numerator
     *
     * @param double $general_numerator general_numerator
     *
     * @return $this
     */
    public function setGeneralNumerator($general_numerator)
    {
        $this->container['general_numerator'] = $general_numerator;

        return $this;
    }

    /**
     * Gets price_numerator
     *
     * @return double
     */
    public function getPriceNumerator()
    {
        return $this->container['price_numerator'];
    }

    /**
     * Sets price_numerator
     *
     * @param double $price_numerator price_numerator
     *
     * @return $this
     */
    public function setPriceNumerator($price_numerator)
    {
        $this->container['price_numerator'] = $price_numerator;

        return $this;
    }

    /**
     * Gets price_denominator
     *
     * @return double
     */
    public function getPriceDenominator()
    {
        return $this->container['price_denominator'];
    }

    /**
     * Sets price_denominator
     *
     * @param double $price_denominator price_denominator
     *
     * @return $this
     */
    public function setPriceDenominator($price_denominator)
    {
        $this->container['price_denominator'] = $price_denominator;

        return $this;
    }

    /**
     * Gets mtf_enabled
     *
     * @return bool
     */
    public function getMtfEnabled()
    {
        return $this->container['mtf_enabled'];
    }

    /**
     * Sets mtf_enabled
     *
     * @param bool $mtf_enabled mtf_enabled
     *
     * @return $this
     */
    public function setMtfEnabled($mtf_enabled)
    {
        $this->container['mtf_enabled'] = $mtf_enabled;

        return $this;
    }

    /**
     * Gets mtf_bracket
     *
     * @return double
     */
    public function getMtfBracket()
    {
        return $this->container['mtf_bracket'];
    }

    /**
     * Sets mtf_bracket
     *
     * @param double $mtf_bracket mtf_bracket
     *
     * @return $this
     */
    public function setMtfBracket($mtf_bracket)
    {
        $this->container['mtf_bracket'] = $mtf_bracket;

        return $this;
    }

    /**
     * Gets security_type
     *
     * @return string
     */
    public function getSecurityType()
    {
        return $this->container['security_type'];
    }

    /**
     * Sets security_type
     *
     * @param string $security_type security_type
     *
     * @return $this
     */
    public function setSecurityType($security_type)
    {
        $this->container['security_type'] = $security_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
