<?php
/**
 * Margin
 *
 * PHP version 5
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Upstox\Client\Model;

use \ArrayAccess;
use \Upstox\Client\ObjectSerializer;

/**
 * Margin Class Doc Comment
 *
 * @category Class
 * @description Response data for instrument margin details
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Margin implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Margin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'span_margin' => 'double',
        'exposure_margin' => 'double',
        'equity_margin' => 'double',
        'net_buy_premium' => 'double',
        'additional_margin' => 'double',
        'total_margin' => 'double',
        'tender_margin' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'span_margin' => 'double',
        'exposure_margin' => 'double',
        'equity_margin' => 'double',
        'net_buy_premium' => 'double',
        'additional_margin' => 'double',
        'total_margin' => 'double',
        'tender_margin' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'span_margin' => 'span_margin',
        'exposure_margin' => 'exposure_margin',
        'equity_margin' => 'equity_margin',
        'net_buy_premium' => 'net_buy_premium',
        'additional_margin' => 'additional_margin',
        'total_margin' => 'total_margin',
        'tender_margin' => 'tender_margin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'span_margin' => 'setSpanMargin',
        'exposure_margin' => 'setExposureMargin',
        'equity_margin' => 'setEquityMargin',
        'net_buy_premium' => 'setNetBuyPremium',
        'additional_margin' => 'setAdditionalMargin',
        'total_margin' => 'setTotalMargin',
        'tender_margin' => 'setTenderMargin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'span_margin' => 'getSpanMargin',
        'exposure_margin' => 'getExposureMargin',
        'equity_margin' => 'getEquityMargin',
        'net_buy_premium' => 'getNetBuyPremium',
        'additional_margin' => 'getAdditionalMargin',
        'total_margin' => 'getTotalMargin',
        'tender_margin' => 'getTenderMargin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['span_margin'] = isset($data['span_margin']) ? $data['span_margin'] : null;
        $this->container['exposure_margin'] = isset($data['exposure_margin']) ? $data['exposure_margin'] : null;
        $this->container['equity_margin'] = isset($data['equity_margin']) ? $data['equity_margin'] : null;
        $this->container['net_buy_premium'] = isset($data['net_buy_premium']) ? $data['net_buy_premium'] : null;
        $this->container['additional_margin'] = isset($data['additional_margin']) ? $data['additional_margin'] : null;
        $this->container['total_margin'] = isset($data['total_margin']) ? $data['total_margin'] : null;
        $this->container['tender_margin'] = isset($data['tender_margin']) ? $data['tender_margin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets span_margin
     *
     * @return double
     */
    public function getSpanMargin()
    {
        return $this->container['span_margin'];
    }

    /**
     * Sets span_margin
     *
     * @param double $span_margin Upfront margin mandatory by exchange for derivatives trade applicable on only FNO trade
     *
     * @return $this
     */
    public function setSpanMargin($span_margin)
    {
        $this->container['span_margin'] = $span_margin;

        return $this;
    }

    /**
     * Gets exposure_margin
     *
     * @return double
     */
    public function getExposureMargin()
    {
        return $this->container['exposure_margin'];
    }

    /**
     * Sets exposure_margin
     *
     * @param double $exposure_margin Based on ELM percentage values provided by exchange, applicable on only FNO trade
     *
     * @return $this
     */
    public function setExposureMargin($exposure_margin)
    {
        $this->container['exposure_margin'] = $exposure_margin;

        return $this;
    }

    /**
     * Gets equity_margin
     *
     * @return double
     */
    public function getEquityMargin()
    {
        return $this->container['equity_margin'];
    }

    /**
     * Sets equity_margin
     *
     * @param double $equity_margin Margin applicable for any equity trade
     *
     * @return $this
     */
    public function setEquityMargin($equity_margin)
    {
        $this->container['equity_margin'] = $equity_margin;

        return $this;
    }

    /**
     * Gets net_buy_premium
     *
     * @return double
     */
    public function getNetBuyPremium()
    {
        return $this->container['net_buy_premium'];
    }

    /**
     * Sets net_buy_premium
     *
     * @param double $net_buy_premium Option premium required.
     *
     * @return $this
     */
    public function setNetBuyPremium($net_buy_premium)
    {
        $this->container['net_buy_premium'] = $net_buy_premium;

        return $this;
    }

    /**
     * Gets additional_margin
     *
     * @return double
     */
    public function getAdditionalMargin()
    {
        return $this->container['additional_margin'];
    }

    /**
     * Sets additional_margin
     *
     * @param double $additional_margin Application margin applicable on MCX FNO trade for certain commodities
     *
     * @return $this
     */
    public function setAdditionalMargin($additional_margin)
    {
        $this->container['additional_margin'] = $additional_margin;

        return $this;
    }

    /**
     * Gets total_margin
     *
     * @return double
     */
    public function getTotalMargin()
    {
        return $this->container['total_margin'];
    }

    /**
     * Sets total_margin
     *
     * @param double $total_margin Total margin required for the basket
     *
     * @return $this
     */
    public function setTotalMargin($total_margin)
    {
        $this->container['total_margin'] = $total_margin;

        return $this;
    }

    /**
     * Gets tender_margin
     *
     * @return double
     */
    public function getTenderMargin()
    {
        return $this->container['tender_margin'];
    }

    /**
     * Sets tender_margin
     *
     * @param double $tender_margin Tender margin
     *
     * @return $this
     */
    public function setTenderMargin($tender_margin)
    {
        $this->container['tender_margin'] = $tender_margin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
