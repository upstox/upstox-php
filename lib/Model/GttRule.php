<?php
/**
 * GttRule
 *
 * PHP version 5
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Upstox\Client\Model;

use \ArrayAccess;
use \Upstox\Client\ObjectSerializer;

/**
 * GttRule Class Doc Comment
 *
 * @category Class
 * @description List of rules defining the conditions for each leg in the GTT order
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GttRule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GttRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'strategy' => 'string',
        'trigger_type' => 'string',
        'trigger_price' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'strategy' => null,
        'trigger_type' => null,
        'trigger_price' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'strategy' => 'strategy',
        'trigger_type' => 'trigger_type',
        'trigger_price' => 'trigger_price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'strategy' => 'setStrategy',
        'trigger_type' => 'setTriggerType',
        'trigger_price' => 'setTriggerPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'strategy' => 'getStrategy',
        'trigger_type' => 'getTriggerType',
        'trigger_price' => 'getTriggerPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STRATEGY_ENTRY = 'ENTRY';
    const STRATEGY_STOPLOSS = 'STOPLOSS';
    const STRATEGY_TARGET = 'TARGET';
    const TRIGGER_TYPE_ABOVE = 'ABOVE';
    const TRIGGER_TYPE_BELOW = 'BELOW';
    const TRIGGER_TYPE_IMMEDIATE = 'IMMEDIATE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrategyAllowableValues()
    {
        return [
            self::STRATEGY_ENTRY,
            self::STRATEGY_STOPLOSS,
            self::STRATEGY_TARGET,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggerTypeAllowableValues()
    {
        return [
            self::TRIGGER_TYPE_ABOVE,
            self::TRIGGER_TYPE_BELOW,
            self::TRIGGER_TYPE_IMMEDIATE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['strategy'] = isset($data['strategy']) ? $data['strategy'] : null;
        $this->container['trigger_type'] = isset($data['trigger_type']) ? $data['trigger_type'] : null;
        $this->container['trigger_price'] = isset($data['trigger_price']) ? $data['trigger_price'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['strategy'] === null) {
            $invalidProperties[] = "'strategy' can't be null";
        }
        $allowedValues = $this->getStrategyAllowableValues();
        if (!is_null($this->container['strategy']) && !in_array($this->container['strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'strategy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['trigger_type'] === null) {
            $invalidProperties[] = "'trigger_type' can't be null";
        }
        $allowedValues = $this->getTriggerTypeAllowableValues();
        if (!is_null($this->container['trigger_type']) && !in_array($this->container['trigger_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'trigger_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['trigger_price'] === null) {
            $invalidProperties[] = "'trigger_price' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets strategy
     *
     * @return string
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param string $strategy Defines the strategy for the GTT order leg: ENTRY - First leg order STOPLOSS - Stop-loss order TARGET - Target order
     *
     * @return $this
     */
    public function setStrategy($strategy)
    {
        $allowedValues = $this->getStrategyAllowableValues();
        if (!in_array($strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'strategy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets trigger_type
     *
     * @return string
     */
    public function getTriggerType()
    {
        return $this->container['trigger_type'];
    }

    /**
     * Sets trigger_type
     *
     * @param string $trigger_type Trigger type for each leg of the order
     *
     * @return $this
     */
    public function setTriggerType($trigger_type)
    {
        $allowedValues = $this->getTriggerTypeAllowableValues();
        if (!in_array($trigger_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'trigger_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trigger_type'] = $trigger_type;

        return $this;
    }

    /**
     * Gets trigger_price
     *
     * @return double
     */
    public function getTriggerPrice()
    {
        return $this->container['trigger_price'];
    }

    /**
     * Sets trigger_price
     *
     * @param double $trigger_price Trigger price for the GTT order leg
     *
     * @return $this
     */
    public function setTriggerPrice($trigger_price)
    {
        $this->container['trigger_price'] = $trigger_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
