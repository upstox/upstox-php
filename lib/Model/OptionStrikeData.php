<?php
/**
 * OptionStrikeData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Upstox\Client\Model;

use \ArrayAccess;
use \Upstox\Client\ObjectSerializer;

/**
 * OptionStrikeData Class Doc Comment
 *
 * @category Class
 * @description Response data for option chain data
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OptionStrikeData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OptionStrikeData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'expiry' => '\DateTime',
        'pcr' => 'double',
        'strike_price' => 'double',
        'underlying_key' => 'string',
        'underlying_spot_price' => 'double',
        'call_options' => '\Upstox\Client\Model\PutCallOptionChainData',
        'put_options' => '\Upstox\Client\Model\PutCallOptionChainData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'expiry' => 'date-time',
        'pcr' => 'double',
        'strike_price' => 'double',
        'underlying_key' => null,
        'underlying_spot_price' => 'double',
        'call_options' => null,
        'put_options' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expiry' => 'expiry',
        'pcr' => 'pcr',
        'strike_price' => 'strike_price',
        'underlying_key' => 'underlying_key',
        'underlying_spot_price' => 'underlying_spot_price',
        'call_options' => 'call_options',
        'put_options' => 'put_options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expiry' => 'setExpiry',
        'pcr' => 'setPcr',
        'strike_price' => 'setStrikePrice',
        'underlying_key' => 'setUnderlyingKey',
        'underlying_spot_price' => 'setUnderlyingSpotPrice',
        'call_options' => 'setCallOptions',
        'put_options' => 'setPutOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expiry' => 'getExpiry',
        'pcr' => 'getPcr',
        'strike_price' => 'getStrikePrice',
        'underlying_key' => 'getUnderlyingKey',
        'underlying_spot_price' => 'getUnderlyingSpotPrice',
        'call_options' => 'getCallOptions',
        'put_options' => 'getPutOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['expiry'] = isset($data['expiry']) ? $data['expiry'] : null;
        $this->container['pcr'] = isset($data['pcr']) ? $data['pcr'] : null;
        $this->container['strike_price'] = isset($data['strike_price']) ? $data['strike_price'] : null;
        $this->container['underlying_key'] = isset($data['underlying_key']) ? $data['underlying_key'] : null;
        $this->container['underlying_spot_price'] = isset($data['underlying_spot_price']) ? $data['underlying_spot_price'] : null;
        $this->container['call_options'] = isset($data['call_options']) ? $data['call_options'] : null;
        $this->container['put_options'] = isset($data['put_options']) ? $data['put_options'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets expiry
     *
     * @return \DateTime
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param \DateTime $expiry expiry
     *
     * @return $this
     */
    public function setExpiry($expiry)
    {
        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets pcr
     *
     * @return double
     */
    public function getPcr()
    {
        return $this->container['pcr'];
    }

    /**
     * Sets pcr
     *
     * @param double $pcr pcr
     *
     * @return $this
     */
    public function setPcr($pcr)
    {
        $this->container['pcr'] = $pcr;

        return $this;
    }

    /**
     * Gets strike_price
     *
     * @return double
     */
    public function getStrikePrice()
    {
        return $this->container['strike_price'];
    }

    /**
     * Sets strike_price
     *
     * @param double $strike_price strike_price
     *
     * @return $this
     */
    public function setStrikePrice($strike_price)
    {
        $this->container['strike_price'] = $strike_price;

        return $this;
    }

    /**
     * Gets underlying_key
     *
     * @return string
     */
    public function getUnderlyingKey()
    {
        return $this->container['underlying_key'];
    }

    /**
     * Sets underlying_key
     *
     * @param string $underlying_key underlying_key
     *
     * @return $this
     */
    public function setUnderlyingKey($underlying_key)
    {
        $this->container['underlying_key'] = $underlying_key;

        return $this;
    }

    /**
     * Gets underlying_spot_price
     *
     * @return double
     */
    public function getUnderlyingSpotPrice()
    {
        return $this->container['underlying_spot_price'];
    }

    /**
     * Sets underlying_spot_price
     *
     * @param double $underlying_spot_price underlying_spot_price
     *
     * @return $this
     */
    public function setUnderlyingSpotPrice($underlying_spot_price)
    {
        $this->container['underlying_spot_price'] = $underlying_spot_price;

        return $this;
    }

    /**
     * Gets call_options
     *
     * @return \Upstox\Client\Model\PutCallOptionChainData
     */
    public function getCallOptions()
    {
        return $this->container['call_options'];
    }

    /**
     * Sets call_options
     *
     * @param \Upstox\Client\Model\PutCallOptionChainData $call_options call_options
     *
     * @return $this
     */
    public function setCallOptions($call_options)
    {
        $this->container['call_options'] = $call_options;

        return $this;
    }

    /**
     * Gets put_options
     *
     * @return \Upstox\Client\Model\PutCallOptionChainData
     */
    public function getPutOptions()
    {
        return $this->container['put_options'];
    }

    /**
     * Sets put_options
     *
     * @param \Upstox\Client\Model\PutCallOptionChainData $put_options put_options
     *
     * @return $this
     */
    public function setPutOptions($put_options)
    {
        $this->container['put_options'] = $put_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
