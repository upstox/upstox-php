<?php
/**
 * MarketData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Upstox\Client\Model;

use \ArrayAccess;
use \Upstox\Client\ObjectSerializer;

/**
 * MarketData Class Doc Comment
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MarketData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MarketData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ltp' => 'double',
        'volume' => 'int',
        'oi' => 'double',
        'close_price' => 'double',
        'bid_price' => 'double',
        'bid_qty' => 'int',
        'ask_price' => 'double',
        'ask_qty' => 'int',
        'prev_oi' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ltp' => 'double',
        'volume' => 'int64',
        'oi' => 'double',
        'close_price' => 'double',
        'bid_price' => 'double',
        'bid_qty' => 'int32',
        'ask_price' => 'double',
        'ask_qty' => 'int32',
        'prev_oi' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ltp' => 'ltp',
        'volume' => 'volume',
        'oi' => 'oi',
        'close_price' => 'close_price',
        'bid_price' => 'bid_price',
        'bid_qty' => 'bid_qty',
        'ask_price' => 'ask_price',
        'ask_qty' => 'ask_qty',
        'prev_oi' => 'prev_oi'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ltp' => 'setLtp',
        'volume' => 'setVolume',
        'oi' => 'setOi',
        'close_price' => 'setClosePrice',
        'bid_price' => 'setBidPrice',
        'bid_qty' => 'setBidQty',
        'ask_price' => 'setAskPrice',
        'ask_qty' => 'setAskQty',
        'prev_oi' => 'setPrevOi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ltp' => 'getLtp',
        'volume' => 'getVolume',
        'oi' => 'getOi',
        'close_price' => 'getClosePrice',
        'bid_price' => 'getBidPrice',
        'bid_qty' => 'getBidQty',
        'ask_price' => 'getAskPrice',
        'ask_qty' => 'getAskQty',
        'prev_oi' => 'getPrevOi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ltp'] = isset($data['ltp']) ? $data['ltp'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['oi'] = isset($data['oi']) ? $data['oi'] : null;
        $this->container['close_price'] = isset($data['close_price']) ? $data['close_price'] : null;
        $this->container['bid_price'] = isset($data['bid_price']) ? $data['bid_price'] : null;
        $this->container['bid_qty'] = isset($data['bid_qty']) ? $data['bid_qty'] : null;
        $this->container['ask_price'] = isset($data['ask_price']) ? $data['ask_price'] : null;
        $this->container['ask_qty'] = isset($data['ask_qty']) ? $data['ask_qty'] : null;
        $this->container['prev_oi'] = isset($data['prev_oi']) ? $data['prev_oi'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ltp
     *
     * @return double
     */
    public function getLtp()
    {
        return $this->container['ltp'];
    }

    /**
     * Sets ltp
     *
     * @param double $ltp ltp
     *
     * @return $this
     */
    public function setLtp($ltp)
    {
        $this->container['ltp'] = $ltp;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return int
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param int $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets oi
     *
     * @return double
     */
    public function getOi()
    {
        return $this->container['oi'];
    }

    /**
     * Sets oi
     *
     * @param double $oi oi
     *
     * @return $this
     */
    public function setOi($oi)
    {
        $this->container['oi'] = $oi;

        return $this;
    }

    /**
     * Gets close_price
     *
     * @return double
     */
    public function getClosePrice()
    {
        return $this->container['close_price'];
    }

    /**
     * Sets close_price
     *
     * @param double $close_price close_price
     *
     * @return $this
     */
    public function setClosePrice($close_price)
    {
        $this->container['close_price'] = $close_price;

        return $this;
    }

    /**
     * Gets bid_price
     *
     * @return double
     */
    public function getBidPrice()
    {
        return $this->container['bid_price'];
    }

    /**
     * Sets bid_price
     *
     * @param double $bid_price bid_price
     *
     * @return $this
     */
    public function setBidPrice($bid_price)
    {
        $this->container['bid_price'] = $bid_price;

        return $this;
    }

    /**
     * Gets bid_qty
     *
     * @return int
     */
    public function getBidQty()
    {
        return $this->container['bid_qty'];
    }

    /**
     * Sets bid_qty
     *
     * @param int $bid_qty bid_qty
     *
     * @return $this
     */
    public function setBidQty($bid_qty)
    {
        $this->container['bid_qty'] = $bid_qty;

        return $this;
    }

    /**
     * Gets ask_price
     *
     * @return double
     */
    public function getAskPrice()
    {
        return $this->container['ask_price'];
    }

    /**
     * Sets ask_price
     *
     * @param double $ask_price ask_price
     *
     * @return $this
     */
    public function setAskPrice($ask_price)
    {
        $this->container['ask_price'] = $ask_price;

        return $this;
    }

    /**
     * Gets ask_qty
     *
     * @return int
     */
    public function getAskQty()
    {
        return $this->container['ask_qty'];
    }

    /**
     * Sets ask_qty
     *
     * @param int $ask_qty ask_qty
     *
     * @return $this
     */
    public function setAskQty($ask_qty)
    {
        $this->container['ask_qty'] = $ask_qty;

        return $this;
    }

    /**
     * Gets prev_oi
     *
     * @return double
     */
    public function getPrevOi()
    {
        return $this->container['prev_oi'];
    }

    /**
     * Sets prev_oi
     *
     * @param double $prev_oi prev_oi
     *
     * @return $this
     */
    public function setPrevOi($prev_oi)
    {
        $this->container['prev_oi'] = $prev_oi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
