<?php
/**
 * TradeProfitAndLossApi
 * PHP version 5
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Upstox Developer API
 *
 * Build your App on the Upstox platform  ![Banner](https://api-v2.upstox.com/api-docs/images/banner.jpg \"banner\")  # Introduction  Upstox API is a set of rest APIs that provide data required to build a complete investment and trading platform. Execute orders in real time, manage user portfolio, stream live market data (using Websocket), and more, with the easy to understand API collection.  All requests are over HTTPS and the requests are sent with the content-type ‘application/json’. Developers have the option of choosing the response type as JSON or CSV for a few API calls.  To be able to use these APIs you need to create an App in the Developer Console and generate your **apiKey** and **apiSecret**. You can use a redirect URL which will be called after the login flow.  If you are a **trader**, you can directly create apps from Upstox mobile app or the desktop platform itself from **Apps** sections inside the **Account** Tab. Head over to <a href=\"http://account.upstox.com/developer/apps\" target=\"_blank\">account.upstox.com/developer/apps</a>.</br> If you are a **business** looking to integrate Upstox APIs, reach out to us and we will get a custom app created for you in no time.  It is highly recommended that you do not embed the **apiSecret** in your frontend app. Create a remote backend which does the handshake on behalf of the frontend app. Marking the apiSecret in the frontend app will make your app vulnerable to threats and potential issues.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Upstox\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Upstox\Client\ApiException;
use Upstox\Client\Configuration;
use Upstox\Client\HeaderSelector;
use Upstox\Client\ObjectSerializer;

/**
 * TradeProfitAndLossApi Class Doc Comment
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TradeProfitAndLossApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getProfitAndLossCharges
     *
     * Get profit and loss on trades
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \Upstox\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Upstox\Client\Model\GetProfitAndLossChargesResponse
     */
    public function getProfitAndLossCharges($segment, $financial_year, $api_version, $from_date = null, $to_date = null)
    {
        list($response) = $this->getProfitAndLossChargesWithHttpInfo($segment, $financial_year, $api_version, $from_date, $to_date);
        return $response;
    }

    /**
     * Operation getProfitAndLossChargesWithHttpInfo
     *
     * Get profit and loss on trades
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \Upstox\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Upstox\Client\Model\GetProfitAndLossChargesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProfitAndLossChargesWithHttpInfo($segment, $financial_year, $api_version, $from_date = null, $to_date = null)
    {
        $returnType = '\Upstox\Client\Model\GetProfitAndLossChargesResponse';
        $request = $this->getProfitAndLossChargesRequest($segment, $financial_year, $api_version, $from_date, $to_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\GetProfitAndLossChargesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProfitAndLossChargesAsync
     *
     * Get profit and loss on trades
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProfitAndLossChargesAsync($segment, $financial_year, $api_version, $from_date = null, $to_date = null)
    {
        return $this->getProfitAndLossChargesAsyncWithHttpInfo($segment, $financial_year, $api_version, $from_date, $to_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProfitAndLossChargesAsyncWithHttpInfo
     *
     * Get profit and loss on trades
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProfitAndLossChargesAsyncWithHttpInfo($segment, $financial_year, $api_version, $from_date = null, $to_date = null)
    {
        $returnType = '\Upstox\Client\Model\GetProfitAndLossChargesResponse';
        $request = $this->getProfitAndLossChargesRequest($segment, $financial_year, $api_version, $from_date, $to_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProfitAndLossCharges'
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProfitAndLossChargesRequest($segment, $financial_year, $api_version, $from_date = null, $to_date = null)
    {
        // verify the required parameter 'segment' is set
        if ($segment === null || (is_array($segment) && count($segment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $segment when calling getProfitAndLossCharges'
            );
        }
        // verify the required parameter 'financial_year' is set
        if ($financial_year === null || (is_array($financial_year) && count($financial_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $financial_year when calling getProfitAndLossCharges'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getProfitAndLossCharges'
            );
        }

        $resourcePath = '/trade/profit-loss/charges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            $queryParams['from_date'] = ObjectSerializer::toQueryValue($from_date, null);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['to_date'] = ObjectSerializer::toQueryValue($to_date, null);
        }
        // query params
        if ($segment !== null) {
            $queryParams['segment'] = ObjectSerializer::toQueryValue($segment, null);
        }
        // query params
        if ($financial_year !== null) {
            $queryParams['financial_year'] = ObjectSerializer::toQueryValue($financial_year, null);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTradeWiseProfitAndLossData
     *
     * Get Trade-wise Profit and Loss Report Data
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  int $page_number Page Number, the pages are starting from 1 (required)
     * @param  int $page_size Page size for pagination. The maximum page size value is obtained from P and L report metadata API. (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \Upstox\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Upstox\Client\Model\GetTradeWiseProfitAndLossDataResponse
     */
    public function getTradeWiseProfitAndLossData($segment, $financial_year, $page_number, $page_size, $api_version, $from_date = null, $to_date = null)
    {
        list($response) = $this->getTradeWiseProfitAndLossDataWithHttpInfo($segment, $financial_year, $page_number, $page_size, $api_version, $from_date, $to_date);
        return $response;
    }

    /**
     * Operation getTradeWiseProfitAndLossDataWithHttpInfo
     *
     * Get Trade-wise Profit and Loss Report Data
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  int $page_number Page Number, the pages are starting from 1 (required)
     * @param  int $page_size Page size for pagination. The maximum page size value is obtained from P and L report metadata API. (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \Upstox\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Upstox\Client\Model\GetTradeWiseProfitAndLossDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTradeWiseProfitAndLossDataWithHttpInfo($segment, $financial_year, $page_number, $page_size, $api_version, $from_date = null, $to_date = null)
    {
        $returnType = '\Upstox\Client\Model\GetTradeWiseProfitAndLossDataResponse';
        $request = $this->getTradeWiseProfitAndLossDataRequest($segment, $financial_year, $page_number, $page_size, $api_version, $from_date, $to_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\GetTradeWiseProfitAndLossDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTradeWiseProfitAndLossDataAsync
     *
     * Get Trade-wise Profit and Loss Report Data
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  int $page_number Page Number, the pages are starting from 1 (required)
     * @param  int $page_size Page size for pagination. The maximum page size value is obtained from P and L report metadata API. (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTradeWiseProfitAndLossDataAsync($segment, $financial_year, $page_number, $page_size, $api_version, $from_date = null, $to_date = null)
    {
        return $this->getTradeWiseProfitAndLossDataAsyncWithHttpInfo($segment, $financial_year, $page_number, $page_size, $api_version, $from_date, $to_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTradeWiseProfitAndLossDataAsyncWithHttpInfo
     *
     * Get Trade-wise Profit and Loss Report Data
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  int $page_number Page Number, the pages are starting from 1 (required)
     * @param  int $page_size Page size for pagination. The maximum page size value is obtained from P and L report metadata API. (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTradeWiseProfitAndLossDataAsyncWithHttpInfo($segment, $financial_year, $page_number, $page_size, $api_version, $from_date = null, $to_date = null)
    {
        $returnType = '\Upstox\Client\Model\GetTradeWiseProfitAndLossDataResponse';
        $request = $this->getTradeWiseProfitAndLossDataRequest($segment, $financial_year, $page_number, $page_size, $api_version, $from_date, $to_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTradeWiseProfitAndLossData'
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  int $page_number Page Number, the pages are starting from 1 (required)
     * @param  int $page_size Page size for pagination. The maximum page size value is obtained from P and L report metadata API. (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTradeWiseProfitAndLossDataRequest($segment, $financial_year, $page_number, $page_size, $api_version, $from_date = null, $to_date = null)
    {
        // verify the required parameter 'segment' is set
        if ($segment === null || (is_array($segment) && count($segment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $segment when calling getTradeWiseProfitAndLossData'
            );
        }
        // verify the required parameter 'financial_year' is set
        if ($financial_year === null || (is_array($financial_year) && count($financial_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $financial_year when calling getTradeWiseProfitAndLossData'
            );
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null || (is_array($page_number) && count($page_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_number when calling getTradeWiseProfitAndLossData'
            );
        }
        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling getTradeWiseProfitAndLossData'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getTradeWiseProfitAndLossData'
            );
        }

        $resourcePath = '/trade/profit-loss/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            $queryParams['from_date'] = ObjectSerializer::toQueryValue($from_date, null);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['to_date'] = ObjectSerializer::toQueryValue($to_date, null);
        }
        // query params
        if ($segment !== null) {
            $queryParams['segment'] = ObjectSerializer::toQueryValue($segment, null);
        }
        // query params
        if ($financial_year !== null) {
            $queryParams['financial_year'] = ObjectSerializer::toQueryValue($financial_year, null);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['page_number'] = ObjectSerializer::toQueryValue($page_number, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTradeWiseProfitAndLossMetaData
     *
     * Get profit and loss meta data on trades
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \Upstox\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Upstox\Client\Model\GetTradeWiseProfitAndLossMetaDataResponse
     */
    public function getTradeWiseProfitAndLossMetaData($segment, $financial_year, $api_version, $from_date = null, $to_date = null)
    {
        list($response) = $this->getTradeWiseProfitAndLossMetaDataWithHttpInfo($segment, $financial_year, $api_version, $from_date, $to_date);
        return $response;
    }

    /**
     * Operation getTradeWiseProfitAndLossMetaDataWithHttpInfo
     *
     * Get profit and loss meta data on trades
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \Upstox\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Upstox\Client\Model\GetTradeWiseProfitAndLossMetaDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTradeWiseProfitAndLossMetaDataWithHttpInfo($segment, $financial_year, $api_version, $from_date = null, $to_date = null)
    {
        $returnType = '\Upstox\Client\Model\GetTradeWiseProfitAndLossMetaDataResponse';
        $request = $this->getTradeWiseProfitAndLossMetaDataRequest($segment, $financial_year, $api_version, $from_date, $to_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\GetTradeWiseProfitAndLossMetaDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTradeWiseProfitAndLossMetaDataAsync
     *
     * Get profit and loss meta data on trades
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTradeWiseProfitAndLossMetaDataAsync($segment, $financial_year, $api_version, $from_date = null, $to_date = null)
    {
        return $this->getTradeWiseProfitAndLossMetaDataAsyncWithHttpInfo($segment, $financial_year, $api_version, $from_date, $to_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTradeWiseProfitAndLossMetaDataAsyncWithHttpInfo
     *
     * Get profit and loss meta data on trades
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTradeWiseProfitAndLossMetaDataAsyncWithHttpInfo($segment, $financial_year, $api_version, $from_date = null, $to_date = null)
    {
        $returnType = '\Upstox\Client\Model\GetTradeWiseProfitAndLossMetaDataResponse';
        $request = $this->getTradeWiseProfitAndLossMetaDataRequest($segment, $financial_year, $api_version, $from_date, $to_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTradeWiseProfitAndLossMetaData'
     *
     * @param  string $segment Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives (required)
     * @param  string $financial_year Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 (required)
     * @param  string $api_version API Version Header (required)
     * @param  string $from_date Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     * @param  string $to_date Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTradeWiseProfitAndLossMetaDataRequest($segment, $financial_year, $api_version, $from_date = null, $to_date = null)
    {
        // verify the required parameter 'segment' is set
        if ($segment === null || (is_array($segment) && count($segment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $segment when calling getTradeWiseProfitAndLossMetaData'
            );
        }
        // verify the required parameter 'financial_year' is set
        if ($financial_year === null || (is_array($financial_year) && count($financial_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $financial_year when calling getTradeWiseProfitAndLossMetaData'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getTradeWiseProfitAndLossMetaData'
            );
        }

        $resourcePath = '/trade/profit-loss/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            $queryParams['from_date'] = ObjectSerializer::toQueryValue($from_date, null);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['to_date'] = ObjectSerializer::toQueryValue($to_date, null);
        }
        // query params
        if ($segment !== null) {
            $queryParams['segment'] = ObjectSerializer::toQueryValue($segment, null);
        }
        // query params
        if ($financial_year !== null) {
            $queryParams['financial_year'] = ObjectSerializer::toQueryValue($financial_year, null);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
