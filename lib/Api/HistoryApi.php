<?php
/**
 * HistoryApi
 * PHP version 5
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Upstox Developer API
 *
 * Build your App on the Upstox platform  ![Banner](https://api-v2.upstox.com/api-docs/images/banner.jpg \"banner\")  # Introduction  Upstox API is a set of rest APIs that provide data required to build a complete investment and trading platform. Execute orders in real time, manage user portfolio, stream live market data (using Websocket), and more, with the easy to understand API collection.  All requests are over HTTPS and the requests are sent with the content-type ‘application/json’. Developers have the option of choosing the response type as JSON or CSV for a few API calls.  To be able to use these APIs you need to create an App in the Developer Console and generate your **apiKey** and **apiSecret**. You can use a redirect URL which will be called after the login flow.  If you are a **trader**, you can directly create apps from Upstox mobile app or the desktop platform itself from **Apps** sections inside the **Account** Tab. Head over to <a href=\"http://account.upstox.com/developer/apps\" target=\"_blank\">account.upstox.com/developer/apps</a>.</br> If you are a **business** looking to integrate Upstox APIs, reach out to us and we will get a custom app created for you in no time.  It is highly recommended that you do not embed the **apiSecret** in your frontend app. Create a remote backend which does the handshake on behalf of the frontend app. Marking the apiSecret in the frontend app will make your app vulnerable to threats and potential issues.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Upstox\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Upstox\Client\ApiException;
use Upstox\Client\Configuration;
use Upstox\Client\HeaderSelector;
use Upstox\Client\ObjectSerializer;

/**
 * HistoryApi Class Doc Comment
 *
 * @category Class
 * @package  Upstox\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HistoryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->client = $this->config->getClient($client);
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getHistoricalCandleData
     *
     * Historical candle data
     *
     * @param  string $instrument_key instrument_key (required)
     * @param  string $interval interval (required)
     * @param  string $to_date to_date (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \Upstox\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Upstox\Client\Model\GetHistoricalCandleResponse
     */
    public function getHistoricalCandleData($instrument_key, $interval, $to_date, $api_version)
    {
        list($response) = $this->getHistoricalCandleDataWithHttpInfo($instrument_key, $interval, $to_date, $api_version);
        return $response;
    }

    /**
     * Operation getHistoricalCandleDataWithHttpInfo
     *
     * Historical candle data
     *
     * @param  string $instrument_key (required)
     * @param  string $interval (required)
     * @param  string $to_date (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \Upstox\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Upstox\Client\Model\GetHistoricalCandleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricalCandleDataWithHttpInfo($instrument_key, $interval, $to_date, $api_version)
    {
        $returnType = '\Upstox\Client\Model\GetHistoricalCandleResponse';
        $request = $this->getHistoricalCandleDataRequest($instrument_key, $interval, $to_date, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\GetHistoricalCandleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricalCandleDataAsync
     *
     * Historical candle data
     *
     * @param  string $instrument_key (required)
     * @param  string $interval (required)
     * @param  string $to_date (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricalCandleDataAsync($instrument_key, $interval, $to_date, $api_version)
    {
        return $this->getHistoricalCandleDataAsyncWithHttpInfo($instrument_key, $interval, $to_date, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricalCandleDataAsyncWithHttpInfo
     *
     * Historical candle data
     *
     * @param  string $instrument_key (required)
     * @param  string $interval (required)
     * @param  string $to_date (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricalCandleDataAsyncWithHttpInfo($instrument_key, $interval, $to_date, $api_version)
    {
        $returnType = '\Upstox\Client\Model\GetHistoricalCandleResponse';
        $request = $this->getHistoricalCandleDataRequest($instrument_key, $interval, $to_date, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricalCandleData'
     *
     * @param  string $instrument_key (required)
     * @param  string $interval (required)
     * @param  string $to_date (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricalCandleDataRequest($instrument_key, $interval, $to_date, $api_version)
    {
        // verify the required parameter 'instrument_key' is set
        if ($instrument_key === null || (is_array($instrument_key) && count($instrument_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instrument_key when calling getHistoricalCandleData'
            );
        }
        // verify the required parameter 'interval' is set
        if ($interval === null || (is_array($interval) && count($interval) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interval when calling getHistoricalCandleData'
            );
        }
        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling getHistoricalCandleData'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getHistoricalCandleData'
            );
        }

        $resourcePath = '/v2/historical-candle/{instrumentKey}/{interval}/{to_date}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($instrument_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instrumentKey' . '}',
                ObjectSerializer::toPathValue($instrument_key),
                $resourcePath
            );
        }
        // path params
        if ($interval !== null) {
            $resourcePath = str_replace(
                '{' . 'interval' . '}',
                ObjectSerializer::toPathValue($interval),
                $resourcePath
            );
        }
        // path params
        if ($to_date !== null) {
            $resourcePath = str_replace(
                '{' . 'to_date' . '}',
                ObjectSerializer::toPathValue($to_date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricalCandleData1
     *
     * Historical candle data
     *
     * @param  string $instrument_key instrument_key (required)
     * @param  string $interval interval (required)
     * @param  string $to_date to_date (required)
     * @param  string $from_date from_date (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \Upstox\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Upstox\Client\Model\GetHistoricalCandleResponse
     */
    public function getHistoricalCandleData1($instrument_key, $interval, $to_date, $from_date, $api_version)
    {
        list($response) = $this->getHistoricalCandleData1WithHttpInfo($instrument_key, $interval, $to_date, $from_date, $api_version);
        return $response;
    }

    /**
     * Operation getHistoricalCandleData1WithHttpInfo
     *
     * Historical candle data
     *
     * @param  string $instrument_key (required)
     * @param  string $interval (required)
     * @param  string $to_date (required)
     * @param  string $from_date (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \Upstox\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Upstox\Client\Model\GetHistoricalCandleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricalCandleData1WithHttpInfo($instrument_key, $interval, $to_date, $from_date, $api_version)
    {
        $returnType = '\Upstox\Client\Model\GetHistoricalCandleResponse';
        $request = $this->getHistoricalCandleData1Request($instrument_key, $interval, $to_date, $from_date, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\GetHistoricalCandleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricalCandleData1Async
     *
     * Historical candle data
     *
     * @param  string $instrument_key (required)
     * @param  string $interval (required)
     * @param  string $to_date (required)
     * @param  string $from_date (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricalCandleData1Async($instrument_key, $interval, $to_date, $from_date, $api_version)
    {
        return $this->getHistoricalCandleData1AsyncWithHttpInfo($instrument_key, $interval, $to_date, $from_date, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricalCandleData1AsyncWithHttpInfo
     *
     * Historical candle data
     *
     * @param  string $instrument_key (required)
     * @param  string $interval (required)
     * @param  string $to_date (required)
     * @param  string $from_date (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricalCandleData1AsyncWithHttpInfo($instrument_key, $interval, $to_date, $from_date, $api_version)
    {
        $returnType = '\Upstox\Client\Model\GetHistoricalCandleResponse';
        $request = $this->getHistoricalCandleData1Request($instrument_key, $interval, $to_date, $from_date, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricalCandleData1'
     *
     * @param  string $instrument_key (required)
     * @param  string $interval (required)
     * @param  string $to_date (required)
     * @param  string $from_date (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricalCandleData1Request($instrument_key, $interval, $to_date, $from_date, $api_version)
    {
        // verify the required parameter 'instrument_key' is set
        if ($instrument_key === null || (is_array($instrument_key) && count($instrument_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instrument_key when calling getHistoricalCandleData1'
            );
        }
        // verify the required parameter 'interval' is set
        if ($interval === null || (is_array($interval) && count($interval) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interval when calling getHistoricalCandleData1'
            );
        }
        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling getHistoricalCandleData1'
            );
        }
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling getHistoricalCandleData1'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getHistoricalCandleData1'
            );
        }

        $resourcePath = '/v2/historical-candle/{instrumentKey}/{interval}/{to_date}/{from_date}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($instrument_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instrumentKey' . '}',
                ObjectSerializer::toPathValue($instrument_key),
                $resourcePath
            );
        }
        // path params
        if ($interval !== null) {
            $resourcePath = str_replace(
                '{' . 'interval' . '}',
                ObjectSerializer::toPathValue($interval),
                $resourcePath
            );
        }
        // path params
        if ($to_date !== null) {
            $resourcePath = str_replace(
                '{' . 'to_date' . '}',
                ObjectSerializer::toPathValue($to_date),
                $resourcePath
            );
        }
        // path params
        if ($from_date !== null) {
            $resourcePath = str_replace(
                '{' . 'from_date' . '}',
                ObjectSerializer::toPathValue($from_date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIntraDayCandleData
     *
     * Intra day candle data
     *
     * @param  string $instrument_key instrument_key (required)
     * @param  string $interval interval (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \Upstox\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Upstox\Client\Model\GetIntraDayCandleResponse
     */
    public function getIntraDayCandleData($instrument_key, $interval, $api_version)
    {
        list($response) = $this->getIntraDayCandleDataWithHttpInfo($instrument_key, $interval, $api_version);
        return $response;
    }

    /**
     * Operation getIntraDayCandleDataWithHttpInfo
     *
     * Intra day candle data
     *
     * @param  string $instrument_key (required)
     * @param  string $interval (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \Upstox\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Upstox\Client\Model\GetIntraDayCandleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIntraDayCandleDataWithHttpInfo($instrument_key, $interval, $api_version)
    {
        $returnType = '\Upstox\Client\Model\GetIntraDayCandleResponse';
        $request = $this->getIntraDayCandleDataRequest($instrument_key, $interval, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\ApiGatewayErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Upstox\Client\Model\GetIntraDayCandleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIntraDayCandleDataAsync
     *
     * Intra day candle data
     *
     * @param  string $instrument_key (required)
     * @param  string $interval (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIntraDayCandleDataAsync($instrument_key, $interval, $api_version)
    {
        return $this->getIntraDayCandleDataAsyncWithHttpInfo($instrument_key, $interval, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIntraDayCandleDataAsyncWithHttpInfo
     *
     * Intra day candle data
     *
     * @param  string $instrument_key (required)
     * @param  string $interval (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIntraDayCandleDataAsyncWithHttpInfo($instrument_key, $interval, $api_version)
    {
        $returnType = '\Upstox\Client\Model\GetIntraDayCandleResponse';
        $request = $this->getIntraDayCandleDataRequest($instrument_key, $interval, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIntraDayCandleData'
     *
     * @param  string $instrument_key (required)
     * @param  string $interval (required)
     * @param  string $api_version API Version Header (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIntraDayCandleDataRequest($instrument_key, $interval, $api_version)
    {
        // verify the required parameter 'instrument_key' is set
        if ($instrument_key === null || (is_array($instrument_key) && count($instrument_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instrument_key when calling getIntraDayCandleData'
            );
        }
        // verify the required parameter 'interval' is set
        if ($interval === null || (is_array($interval) && count($interval) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interval when calling getIntraDayCandleData'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getIntraDayCandleData'
            );
        }

        $resourcePath = '/v2/historical-candle/intraday/{instrumentKey}/{interval}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($instrument_key !== null) {
            $resourcePath = str_replace(
                '{' . 'instrumentKey' . '}',
                ObjectSerializer::toPathValue($instrument_key),
                $resourcePath
            );
        }
        // path params
        if ($interval !== null) {
            $resourcePath = str_replace(
                '{' . 'interval' . '}',
                ObjectSerializer::toPathValue($interval),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
